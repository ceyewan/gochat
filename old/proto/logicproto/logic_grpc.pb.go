// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: logic.proto

package logicproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatLogicService_Register_FullMethodName   = "/logicproto.ChatLogicService/Register"
	ChatLogicService_Login_FullMethodName      = "/logicproto.ChatLogicService/Login"
	ChatLogicService_CheckAuth_FullMethodName  = "/logicproto.ChatLogicService/CheckAuth"
	ChatLogicService_Logout_FullMethodName     = "/logicproto.ChatLogicService/Logout"
	ChatLogicService_Connect_FullMethodName    = "/logicproto.ChatLogicService/Connect"
	ChatLogicService_DisConnect_FullMethodName = "/logicproto.ChatLogicService/DisConnect"
	ChatLogicService_Push_FullMethodName       = "/logicproto.ChatLogicService/Push"
	ChatLogicService_PushRoom_FullMethodName   = "/logicproto.ChatLogicService/PushRoom"
)

// ChatLogicServiceClient is the client API for ChatLogicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChatLogicService 定义聊天系统的核心业务逻辑服务
type ChatLogicServiceClient interface {
	// 用户认证相关
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*CommonReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CommonReply, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// 连接管理相关
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*CommonReply, error)
	DisConnect(ctx context.Context, in *DisConnectRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// 消息推送相关
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*CommonReply, error)
	PushRoom(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*CommonReply, error)
}

type chatLogicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatLogicServiceClient(cc grpc.ClientConnInterface) ChatLogicServiceClient {
	return &chatLogicServiceClient{cc}
}

func (c *chatLogicServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, ChatLogicService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLogicServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, ChatLogicService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLogicServiceClient) CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, ChatLogicService_CheckAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLogicServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, ChatLogicService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLogicServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, ChatLogicService_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLogicServiceClient) DisConnect(ctx context.Context, in *DisConnectRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, ChatLogicService_DisConnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLogicServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, ChatLogicService_Push_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLogicServiceClient) PushRoom(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, ChatLogicService_PushRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatLogicServiceServer is the server API for ChatLogicService service.
// All implementations must embed UnimplementedChatLogicServiceServer
// for forward compatibility.
//
// ChatLogicService 定义聊天系统的核心业务逻辑服务
type ChatLogicServiceServer interface {
	// 用户认证相关
	Register(context.Context, *RegisterRequest) (*CommonReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	CheckAuth(context.Context, *CheckAuthRequest) (*CommonReply, error)
	Logout(context.Context, *LogoutRequest) (*CommonReply, error)
	// 连接管理相关
	Connect(context.Context, *ConnectRequest) (*CommonReply, error)
	DisConnect(context.Context, *DisConnectRequest) (*CommonReply, error)
	// 消息推送相关
	Push(context.Context, *PushRequest) (*CommonReply, error)
	PushRoom(context.Context, *PushRequest) (*CommonReply, error)
	mustEmbedUnimplementedChatLogicServiceServer()
}

// UnimplementedChatLogicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatLogicServiceServer struct{}

func (UnimplementedChatLogicServiceServer) Register(context.Context, *RegisterRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedChatLogicServiceServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedChatLogicServiceServer) CheckAuth(context.Context, *CheckAuthRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedChatLogicServiceServer) Logout(context.Context, *LogoutRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedChatLogicServiceServer) Connect(context.Context, *ConnectRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedChatLogicServiceServer) DisConnect(context.Context, *DisConnectRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisConnect not implemented")
}
func (UnimplementedChatLogicServiceServer) Push(context.Context, *PushRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedChatLogicServiceServer) PushRoom(context.Context, *PushRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushRoom not implemented")
}
func (UnimplementedChatLogicServiceServer) mustEmbedUnimplementedChatLogicServiceServer() {}
func (UnimplementedChatLogicServiceServer) testEmbeddedByValue()                          {}

// UnsafeChatLogicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatLogicServiceServer will
// result in compilation errors.
type UnsafeChatLogicServiceServer interface {
	mustEmbedUnimplementedChatLogicServiceServer()
}

func RegisterChatLogicServiceServer(s grpc.ServiceRegistrar, srv ChatLogicServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatLogicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatLogicService_ServiceDesc, srv)
}

func _ChatLogicService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLogicServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLogicService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLogicServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLogicService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLogicServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLogicService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLogicServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLogicService_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLogicServiceServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLogicService_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLogicServiceServer).CheckAuth(ctx, req.(*CheckAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLogicService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLogicServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLogicService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLogicServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLogicService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLogicServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLogicService_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLogicServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLogicService_DisConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLogicServiceServer).DisConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLogicService_DisConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLogicServiceServer).DisConnect(ctx, req.(*DisConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLogicService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLogicServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLogicService_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLogicServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLogicService_PushRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLogicServiceServer).PushRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLogicService_PushRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLogicServiceServer).PushRoom(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatLogicService_ServiceDesc is the grpc.ServiceDesc for ChatLogicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatLogicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logicproto.ChatLogicService",
	HandlerType: (*ChatLogicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ChatLogicService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ChatLogicService_Login_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _ChatLogicService_CheckAuth_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ChatLogicService_Logout_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _ChatLogicService_Connect_Handler,
		},
		{
			MethodName: "DisConnect",
			Handler:    _ChatLogicService_DisConnect_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _ChatLogicService_Push_Handler,
		},
		{
			MethodName: "PushRoom",
			Handler:    _ChatLogicService_PushRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic.proto",
}
