openapi: 3.0.3
info:
  title: GoChat HTTP API
  description: |-
    GoChat RESTful API 的官方 OpenAPI 3.0 规范文档。
    本文档采用统一的会话抽象设计，将单聊、群聊、世界聊天室统一为 conversation 概念。

    The official OpenAPI 3.0 specification for the GoChat RESTful API.
    This document uses a unified conversation abstraction that treats single chats, group chats, and world chat rooms as conversations.
  version: 2.0.0

servers:
  - url: /api
    description: API Base Path

paths:
  # ===================================================================
  # 身份认证 APIs / Authentication APIs
  # ===================================================================
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user | 注册新用户
      description: 创建一个新的用户账户。需要提供唯一的用户名和密码。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: 用户名，必须唯一
                  example: "newuser"
                password:
                  type: string
                  format: password
                  description: 用户密码，建议使用强密码
                  example: "strongpassword123"
      responses:
        "201":
          description: Registration successful. | 注册成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
        "400":
          description: Bad Request (e.g., validation error, user already exists). | 请求错误（如验证失败、用户已存在）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log in as a registered user | 用户登录
      description: 使用已注册的用户名和密码进行登录认证。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: 注册时使用的用户名
                  example: "testuser"
                password:
                  type: string
                  format: password
                  description: 用户账户密码
                  example: "password123"
      responses:
        "200":
          description: Login successful. Returns JWT tokens and user info. | 登录成功，返回JWT令牌和用户信息
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            description: JWT访问令牌
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          refreshToken:
                            type: string
                            description: JWT刷新令牌
                            example: "def50200..."
                          expiresIn:
                            type: integer
                            format: int64
                            description: Expiration timestamp for the access token. | 访问令牌的过期时间戳
                          user:
                            $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized (e.g., invalid credentials). | 未授权访问（如凭证无效）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/guest:
    post:
      tags:
        - Authentication
      summary: Log in as a guest | 游客登录
      description: Creates a temporary guest account and returns login credentials. Guests are automatically joined to the world chat room. | 创建临时游客账户并返回登录凭证。游客将自动加入世界聊天室。
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
      responses:
        "201":
          description: Guest login successful. | 游客登录成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          refreshToken:
                            type: string
                            example: "def50200..."
                          expiresIn:
                            type: integer
                            format: int64
                            description: Expiration timestamp for the access token. | 访问令牌的过期时间戳
                          user:
                            $ref: "#/components/schemas/User"

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out the current user | 用户退出登录
      description: 退出当前用户的登录状态，使访问令牌失效。
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful. | 退出登录成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardSuccessResponse"
        "401":
          description: Unauthorized (e.g., invalid or expired token). | 未授权访问（如无效或过期的令牌）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ===================================================================
  # 用户 APIs / User APIs
  # ===================================================================
  /users/profile:
    get:
      tags:
        - Users
      summary: Get current user's profile | 获取当前用户信息
      description: 获取当前登录用户的详细个人资料信息。
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved user profile. | 成功获取用户信息
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized. | 未授权访问
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - Users
      summary: Update user profile | 更新用户信息
      description: 更新当前用户的个人资料信息。游客用户不能更新信息。
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatarUrl:
                  type: string
                  format: uri
                  description: 用户头像URL
                  example: "https://example.com/avatar.jpg"
      responses:
        "200":
          description: Successfully updated user profile. | 成功更新用户信息
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "400":
          description: Bad Request (e.g., invalid parameters). | 请求错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (e.g., guest user cannot update profile). | 禁止访问（如游客无法更新信息）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/search:
    get:
      tags:
        - Users
      summary: Search for users by username | 按用户名搜索用户
      description: 根据用户名关键词搜索系统中的用户。游客用户无法使用此功能。
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: The search query (username). | 搜索关键词（用户名）
          schema:
            type: string
            example: "john"
        - name: limit
          in: query
          description: The maximum number of users to return. | 返回用户的最大数量
          schema:
            type: integer
            default: 10
            maximum: 20
      responses:
        "200":
          description: Search results. | 搜索结果
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: "#/components/schemas/User"
        "403":
          description: Forbidden (e.g., guest user cannot search). | 禁止访问（如游客无法搜索）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ===================================================================
  # 会话 APIs / Conversation APIs (统一处理单聊、群聊、世界聊天室)
  # ===================================================================
  /conversations:
    get:
      tags:
        - Conversations
      summary: Get user's conversation list | 获取用户会话列表
      description: 获取当前用户的所有会话列表，包括单聊、群聊和世界聊天室，支持分页查询。
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination. | 分页页码
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of conversations per page. | 每页会话数量
          schema:
            type: integer
            default: 20
        - name: type
          in: query
          description: Filter by conversation type. | 按会话类型过滤
          schema:
            type: integer
            enum: [1, 2, 3]
            description: "1: 单聊, 2: 群聊, 3: 世界聊天室"
      responses:
        "200":
          description: A paginated list of conversations. | 分页的会话列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          conversations:
                            type: array
                            items:
                              $ref: "#/components/schemas/Conversation"
                          hasMore:
                            type: boolean
                            description: Indicates if there are more pages available. | 是否还有更多页面
        "401":
          description: Unauthorized. | 未授权访问
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      tags:
        - Conversations
      summary: Create a new conversation | 创建新会话
      description: 创建新的会话。根据类型可以创建单聊或群聊。游客只能参与世界聊天室，无法创建其他类型会话。
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  type: integer
                  enum: [1, 2]
                  description: "会话类型: 1=单聊, 2=群聊"
                name:
                  type: string
                  description: 会话名称（群聊时必填）
                  example: "项目讨论组"
                members:
                  type: array
                  description: 初始成员用户ID列表
                  items:
                    type: string
                  example: ["user123", "user456"]
                description:
                  type: string
                  description: 会话描述（群聊时可选）
                  example: "项目相关讨论"
      responses:
        "201":
          description: Conversation created successfully. | 会话创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Conversation"
        "400":
          description: Bad Request (e.g., invalid parameters). | 请求错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (e.g., guest user cannot create conversations). | 禁止访问（如游客无法创建会话）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /conversations/{conversationId}:
    get:
      tags:
        - Conversations
      summary: Get conversation details | 获取会话详情
      description: 获取指定会话的详细信息，包括成员列表（如果是群聊）。
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The ID of the conversation. | 会话ID
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved conversation details. | 成功获取会话详情
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Conversation"
                          - type: object
                            properties:
                              members:
                                type: array
                                description: 会话成员列表（群聊时返回）
                                items:
                                  $ref: "#/components/schemas/ConversationMember"
        "401":
          description: Unauthorized. | 未授权访问
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Conversation not found. | 会话不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - Conversations
      summary: Update conversation | 更新会话信息
      description: 更新会话信息（如群名、头像等）。仅群聊支持，且需要管理员权限。
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The ID of the conversation. | 会话ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 新的会话名称
                  example: "新群名"
                avatarUrl:
                  type: string
                  format: uri
                  description: 新的会话头像URL
                  example: "https://example.com/group-avatar.jpg"
                description:
                  type: string
                  description: 新的会话描述
                  example: "更新的群描述"
      responses:
        "200":
          description: Successfully updated conversation. | 成功更新会话信息
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Conversation"
        "403":
          description: Forbidden (e.g., insufficient permissions). | 禁止访问（如权限不足）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /conversations/{conversationId}/messages:
    get:
      tags:
        - Conversations
      summary: Get message history for a conversation | 获取会话消息历史
      description: 获取指定会话的消息历史记录，支持基于游标的分页查询。
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The ID of the conversation. | 会话ID
          schema:
            type: string
        - name: cursor
          in: query
          description: The cursor for pagination (seq_id of the last message from the previous page). | 分页游标（上一页最后一条消息的seq_id）
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: The maximum number of messages to return. | 返回消息的最大数量
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: A paginated list of messages. | 分页的消息列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          messages:
                            type: array
                            items:
                              $ref: "#/components/schemas/Message"
                          nextCursor:
                            type: integer
                            format: int64
                            description: The cursor to use for the next page of results. | 用于下一页结果的游标
                          hasMore:
                            type: boolean
                            description: Whether there are more messages available. | 是否还有更多消息
        "403":
          description: Forbidden (e.g., not a member of the conversation). | 禁止访问（如不是会话成员）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Conversation not found. | 会话不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      tags:
        - Messages
      summary: Send a message to a conversation | 向会话发送消息
      description: 向指定会话发送一条新消息。
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The ID of the conversation to send the message to. | 要发送消息的会话ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - messageType
                - content
              properties:
                messageType:
                  type: integer
                  description: The type of the message (1 for text, 2 for image, etc.). | 消息类型（1=文本，2=图片等）
                  example: 1
                content:
                  type: string
                  description: The content of the message. | 消息内容
                  example: "Hello, world!"
                client_msg_id:
                  type: string
                  description: Client-side message ID for idempotency. | 客户端消息ID，用于幂等性处理
                  example: "client_msg_123456"
      responses:
        "201":
          description: Message sent successfully. | 消息发送成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request (e.g., invalid message content). | 请求错误（如无效的消息内容）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (e.g., not a member, muted). | 禁止访问（如非成员、被禁言）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Conversation not found. | 会话不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /conversations/{conversationId}/read:
    put:
      tags:
        - Conversations
      summary: Mark messages as read | 标记消息为已读
      description: 将指定会话中的消息标记为已读状态。
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The ID of the conversation to mark as read. | 要标记为已读的会话ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - seqId
              properties:
                seqId:
                  type: integer
                  format: int64
                  description: The sequence ID up to which messages should be marked as read. | 标记为已读的最后一条消息的序列ID
                  example: 12345
      responses:
        "200":
          description: Successfully marked as read. | 成功标记为已读
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          unreadCount:
                            type: integer
                            format: int64
                            description: Updated unread count. | 更新后的未读数量
        "403":
          description: Forbidden (e.g., not a member of the conversation). | 禁止访问（如不是会话成员）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Conversation not found. | 会话不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ===================================================================
  # 会话成员管理 APIs / Conversation Member Management APIs
  # ===================================================================
  /conversations/{conversationId}/members:
    get:
      tags:
        - Conversation Members
      summary: Get conversation members | 获取会话成员列表
      description: 获取指定会话的成员列表，支持分页查询。
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The ID of the conversation. | 会话ID
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination. | 分页页码
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of members per page. | 每页成员数量
          schema:
            type: integer
            default: 20
        - name: role
          in: query
          description: Filter by member role. | 按成员角色过滤
          schema:
            type: integer
            enum: [1, 2, 3]
            description: "1: 成员, 2: 管理员, 3: 群主"
      responses:
        "200":
          description: Successfully retrieved member list. | 成功获取成员列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          members:
                            type: array
                            items:
                              $ref: "#/components/schemas/ConversationMember"
                          hasMore:
                            type: boolean

    post:
      tags:
        - Conversation Members
      summary: Add members to conversation | 添加成员到会话
      description: 向群聊中添加新成员。需要管理员权限，单聊和世界聊天室不支持此操作。
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - members
              properties:
                members:
                  type: array
                  description: 要添加的用户ID列表
                  items:
                    type: string
                  example: ["user789", "user101"]
      responses:
        "201":
          description: Members added successfully. | 成功添加成员
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardSuccessResponse"
        "403":
          description: Forbidden (e.g., insufficient permissions). | 禁止访问（如权限不足）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /conversations/{conversationId}/members/{userId}:
    delete:
      tags:
        - Conversation Members
      summary: Remove member from conversation | 从会话中移除成员
      description: 从群聊中移除指定成员。需要管理员权限，单聊和世界聊天室不支持此操作。
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Member removed successfully. | 成功移除成员
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardSuccessResponse"
        "403":
          description: Forbidden (e.g., insufficient permissions). | 禁止访问（如权限不足）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - Conversation Members
      summary: Update member role | 更新成员角色
      description: 更新群聊中指定成员的角色。需要群主权限。
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: integer
                  enum: [1, 2, 3]
                  description: "新角色: 1=成员, 2=管理员, 3=群主"
      responses:
        "200":
          description: Member role updated successfully. | 成功更新成员角色
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardSuccessResponse"
        "403":
          description: Forbidden (e.g., only group owner can change roles). | 禁止访问（如只有群主可以变更角色）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ===================================================================
  # 好友管理 APIs / Friend Management APIs
  # ===================================================================
  /friends/requests:
    get:
      tags:
        - Friends
      summary: Get friend requests | 获取好友申请列表
      description: 获取收到的好友申请列表。游客用户无法使用此功能。
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          description: Request type filter. | 申请类型过滤
          schema:
            type: string
            enum: ["received", "sent"]
            default: "received"
        - name: status
          in: query
          description: Request status filter. | 申请状态过滤
          schema:
            type: integer
            enum: [0, 1, 2]
            description: "0: 待处理, 1: 已接受, 2: 已拒绝"
      responses:
        "200":
          description: Successfully retrieved friend requests. | 成功获取好友申请列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          requests:
                            type: array
                            items:
                              $ref: "#/components/schemas/FriendRequest"

    post:
      tags:
        - Friends
      summary: Send friend request | 发送好友申请
      description: 向指定用户发送好友申请。游客用户无法使用此功能。
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - targetUserId
              properties:
                targetUserId:
                  type: string
                  description: 目标用户ID
                  example: "user123"
                message:
                  type: string
                  description: 申请消息
                  example: "你好，我想添加你为好友"
      responses:
        "201":
          description: Friend request sent successfully. | 成功发送好友申请
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardSuccessResponse"
        "403":
          description: Forbidden (e.g., guest user cannot send requests). | 禁止访问（如游客无法发送申请）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /friends/requests/{requestId}:
    put:
      tags:
        - Friends
      summary: Handle friend request | 处理好友申请
      description: 接受或拒绝好友申请。
      security:
        - BearerAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: ["accept", "reject"]
                  description: 处理动作
                  example: "accept"
      responses:
        "200":
          description: Friend request handled successfully. | 成功处理好友申请
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardSuccessResponse"

  /friends:
    get:
      tags:
        - Friends
      summary: Get friends list | 获取好友列表
      description: 获取当前用户的好友列表。游客用户无法使用此功能。
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved friends list. | 成功获取好友列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/StandardSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          friends:
                            type: array
                            items:
                              $ref: "#/components/schemas/Friend"

components:
  schemas:
    # --- 核心数据模型 / Core Data Models ---
    User:
      type: object
      required:
        - id
        - username
        - isGuest
        - createdAt
      properties:
        id:
          type: string
          description: The unique identifier for the user. | 用户的唯一标识符
          example: "1234567890"
        username:
          type: string
          description: The unique username of the user. | 用户的唯一用户名
          example: "testuser"
        avatarUrl:
          type: string
          format: uri
          description: URL of the user's avatar image. | 用户头像图片的URL
          example: "https://example.com/avatars/user.png"
        isGuest:
          type: boolean
          description: True if the user is a guest account. | 如果是游客账户则为true
        status:
          type: integer
          description: User status (0、normal, 1、disabled). | 用户状态（0、正常, 1、禁用）
          example: 0
        createdAt:
          type: integer
          format: int64
          description: Unix timestamp of when the user was created. | 用户创建时的Unix时间戳
        updatedAt:
          type: integer
          format: int64
          description: Unix timestamp of when the user was last updated. | 用户最后更新时的Unix时间戳

    Message:
      type: object
      required:
        - id
        - conversationId
        - senderId
        - messageType
        - content
        - seqId
        - createdAt
      properties:
        id:
          type: string
          description: The unique identifier for the message. | 消息的唯一标识符
        conversationId:
          type: string
          description: The ID of the conversation this message belongs to. | 此消息所属的会话ID
        senderId:
          type: string
          description: The ID of the user who sent the message. | 发送者的用户ID
        sender:
          $ref: "#/components/schemas/User"
        messageType:
          type: integer
          description: The type of the message (1=text, 2=image, 3=file, 4=system). | 消息类型（1=文本，2=图片，3=文件，4=系统消息）
          enum: [1, 2, 3, 4]
        content:
          type: string
          description: The content of the message. | 消息内容
        seqId:
          type: integer
          format: int64
          description: Sequence ID of the message within the conversation. | 消息在会话中的序列ID
        clientMsgId:
          type: string
          description: Client-side message ID for idempotency. | 客户端消息ID，用于幂等性
        deleted:
          type: boolean
          description: Whether the message has been deleted. | 消息是否已被删除
          default: false
        extra:
          type: string
          description: Additional metadata in JSON format. | 额外的JSON格式元数据
        createdAt:
          type: integer
          format: int64
          description: Unix timestamp of when the message was sent. | 消息发送时的Unix时间戳
        updatedAt:
          type: integer
          format: int64
          description: Unix timestamp of when the message was last updated. | 消息最后更新时的Unix时间戳

    Conversation:
      type: object
      required:
        - id
        - type
        - memberCount
        - updatedAt
      properties:
        id:
          type: string
          description: The unique identifier for the conversation. | 会话的唯一标识符
        type:
          type: integer
          description: The type of conversation (1=single, 2=group, 3=world). | 会话类型（1：单聊，2：群聊，3：世界聊天室）
          enum: [1, 2, 3]
        name:
          type: string
          description: The name of the conversation (group name, channel name, etc.). | 会话名称（群名、频道名等）
        avatarUrl:
          type: string
          format: uri
          description: URL of the conversation's avatar. | 会话头像的URL
        description:
          type: string
          description: Description of the conversation. | 会话描述
        ownerId:
          type: string
          description: The ID of the conversation owner (group owner, channel owner). | 会话所有者ID（群主、频道主）
        memberCount:
          type: integer
          description: The number of members in the conversation. | 会话中的成员数量
        settings:
          type: object
          description: Conversation-specific settings in JSON format. | 会话特定设置（JSON格式）
        lastMessage:
          $ref: "#/components/schemas/Message"
        unreadCount:
          type: integer
          format: int64
          description: The number of unread messages for the current user. | 当前用户的未读消息数量
        updatedAt:
          type: integer
          format: int64
          description: Unix timestamp of the last activity in the conversation. | 会话最后活动时间的Unix时间戳
        myMembership:
          $ref: "#/components/schemas/ConversationMember"

    ConversationMember:
      type: object
      required:
        - userId
        - conversationId
        - role
        - joinedAt
      properties:
        userId:
          type: string
          description: The ID of the user. | 用户ID
        conversationId:
          type: string
          description: The ID of the conversation. | 会话ID
        role:
          type: integer
          description: The role of the user in the conversation (1=member, 2=admin, 3=owner). | 用户在会话中的角色（1=成员，2=管理员，3=群主）
          enum: [1, 2, 3]
        muted:
          type: boolean
          description: Whether the user is muted in this conversation. | 用户是否在此会话中被禁言
          default: false
        joinedAt:
          type: integer
          format: int64
          description: Unix timestamp when the user joined the conversation. | 用户加入会话的时间戳
        updatedAt:
          type: integer
          format: int64
          description: Unix timestamp when the membership was last updated. | 成员信息最后更新的时间戳
        user:
          $ref: "#/components/schemas/User"

    FriendRequest:
      type: object
      required:
        - id
        - requesterId
        - targetId
        - status
        - createdAt
      properties:
        id:
          type: string
          description: The unique identifier for the friend request. | 好友申请的唯一标识符
        requesterId:
          type: string
          description: The ID of the user who sent the request. | 发送申请的用户ID
        targetId:
          type: string
          description: The ID of the user who received the request. | 接收申请的用户ID
        status:
          type: integer
          description: The status of the request (0=pending, 1=accepted, 2=rejected, 3=blocked). | 申请状态（0=待处理，1=已接受，2=已拒绝，3=已拉黑）
          enum: [0, 1, 2, 3]
        message:
          type: string
          description: The message attached to the friend request. | 好友申请附带的消息
        createdAt:
          type: integer
          format: int64
          description: Unix timestamp when the request was created. | 申请创建时间戳
        updatedAt:
          type: integer
          format: int64
          description: Unix timestamp when the request was last updated. | 申请最后更新时间戳
        requester:
          $ref: "#/components/schemas/User"
        target:
          $ref: "#/components/schemas/User"

    Friend:
      type: object
      required:
        - userId
        - friendId
        - status
        - createdAt
      properties:
        userId:
          type: string
          description: The ID of the user. | 用户ID
        friendId:
          type: string
          description: The ID of the friend. | 好友ID
        status:
          type: integer
          description: The friendship status (1=friends, 3=blocked). | 好友状态（1=好友，3=已拉黑）
          enum: [1, 3]
        createdAt:
          type: integer
          format: int64
          description: Unix timestamp when the friendship was established. | 好友关系建立时间戳
        updatedAt:
          type: integer
          format: int64
          description: Unix timestamp when the friendship was last updated. | 好友关系最后更新时间戳
        friend:
          $ref: "#/components/schemas/User"

    # --- 标准响应封装 / Standard Response Wrappers ---
    StandardSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: A descriptive message about the operation. | 关于操作的描述性消息
          example: "Operation successful"
        data:
          type: object
          description: The response data payload. | 响应数据载荷

    Error:
      type: object
      required:
        - success
        - message
        - code
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: A human-readable description of the error. | 人类可读的错误描述
          example: "Invalid username or password."
        code:
          type: string
          description: A unique error code. | 唯一的错误代码
          example: "AUTH_INVALID_CREDENTIALS"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Bearer token for authentication. Example: 'Authorization: Bearer {token}' | JWT Bearer令牌用于身份认证。示例：'Authorization: Bearer {token}'"
