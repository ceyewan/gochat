// common/v1/types.proto
// 定义跨服务共享的通用类型和枚举

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: common/v1/types.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConversationType 会话类型
// 统一定义，避免各服务间类型不一致
type ConversationType int32

const (
	// 未指定类型
	ConversationType_CONVERSATION_TYPE_UNSPECIFIED ConversationType = 0
	// 单聊
	ConversationType_CONVERSATION_TYPE_SINGLE ConversationType = 1
	// 群聊
	ConversationType_CONVERSATION_TYPE_GROUP ConversationType = 2
	// 世界聊天室
	ConversationType_CONVERSATION_TYPE_WORLD ConversationType = 3
)

// Enum value maps for ConversationType.
var (
	ConversationType_name = map[int32]string{
		0: "CONVERSATION_TYPE_UNSPECIFIED",
		1: "CONVERSATION_TYPE_SINGLE",
		2: "CONVERSATION_TYPE_GROUP",
		3: "CONVERSATION_TYPE_WORLD",
	}
	ConversationType_value = map[string]int32{
		"CONVERSATION_TYPE_UNSPECIFIED": 0,
		"CONVERSATION_TYPE_SINGLE":      1,
		"CONVERSATION_TYPE_GROUP":       2,
		"CONVERSATION_TYPE_WORLD":       3,
	}
)

func (x ConversationType) Enum() *ConversationType {
	p := new(ConversationType)
	*p = x
	return p
}

func (x ConversationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_types_proto_enumTypes[0].Descriptor()
}

func (ConversationType) Type() protoreflect.EnumType {
	return &file_common_v1_types_proto_enumTypes[0]
}

func (x ConversationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationType.Descriptor instead.
func (ConversationType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{0}
}

// MessageType 消息类型
// 统一定义消息的类型枚举
type MessageType int32

const (
	// 未指定类型
	MessageType_MESSAGE_TYPE_UNSPECIFIED MessageType = 0
	// 文本消息
	MessageType_MESSAGE_TYPE_TEXT MessageType = 1
	// 图片消息
	MessageType_MESSAGE_TYPE_IMAGE MessageType = 2
	// 文件消息
	MessageType_MESSAGE_TYPE_FILE MessageType = 3
	// 系统消息
	MessageType_MESSAGE_TYPE_SYSTEM MessageType = 4
	// 语音消息
	MessageType_MESSAGE_TYPE_VOICE MessageType = 5
	// 视频消息
	MessageType_MESSAGE_TYPE_VIDEO MessageType = 6
	// 位置消息
	MessageType_MESSAGE_TYPE_LOCATION MessageType = 7
	// 链接消息
	MessageType_MESSAGE_TYPE_LINK MessageType = 8
	// 表情消息
	MessageType_MESSAGE_TYPE_EMOJI MessageType = 9
	// 转发消息
	MessageType_MESSAGE_TYPE_FORWARD MessageType = 10
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "MESSAGE_TYPE_UNSPECIFIED",
		1:  "MESSAGE_TYPE_TEXT",
		2:  "MESSAGE_TYPE_IMAGE",
		3:  "MESSAGE_TYPE_FILE",
		4:  "MESSAGE_TYPE_SYSTEM",
		5:  "MESSAGE_TYPE_VOICE",
		6:  "MESSAGE_TYPE_VIDEO",
		7:  "MESSAGE_TYPE_LOCATION",
		8:  "MESSAGE_TYPE_LINK",
		9:  "MESSAGE_TYPE_EMOJI",
		10: "MESSAGE_TYPE_FORWARD",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"MESSAGE_TYPE_TEXT":        1,
		"MESSAGE_TYPE_IMAGE":       2,
		"MESSAGE_TYPE_FILE":        3,
		"MESSAGE_TYPE_SYSTEM":      4,
		"MESSAGE_TYPE_VOICE":       5,
		"MESSAGE_TYPE_VIDEO":       6,
		"MESSAGE_TYPE_LOCATION":    7,
		"MESSAGE_TYPE_LINK":        8,
		"MESSAGE_TYPE_EMOJI":       9,
		"MESSAGE_TYPE_FORWARD":     10,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_types_proto_enumTypes[1].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_common_v1_types_proto_enumTypes[1]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{1}
}

// ConversationMemberRole 会话成员角色
// 统一定义成员在会话中的角色
type ConversationMemberRole int32

const (
	// 未指定角色
	ConversationMemberRole_CONVERSATION_MEMBER_ROLE_UNSPECIFIED ConversationMemberRole = 0
	// 普通成员
	ConversationMemberRole_CONVERSATION_MEMBER_ROLE_MEMBER ConversationMemberRole = 1
	// 管理员
	ConversationMemberRole_CONVERSATION_MEMBER_ROLE_ADMIN ConversationMemberRole = 2
	// 群主/所有者
	ConversationMemberRole_CONVERSATION_MEMBER_ROLE_OWNER ConversationMemberRole = 3
)

// Enum value maps for ConversationMemberRole.
var (
	ConversationMemberRole_name = map[int32]string{
		0: "CONVERSATION_MEMBER_ROLE_UNSPECIFIED",
		1: "CONVERSATION_MEMBER_ROLE_MEMBER",
		2: "CONVERSATION_MEMBER_ROLE_ADMIN",
		3: "CONVERSATION_MEMBER_ROLE_OWNER",
	}
	ConversationMemberRole_value = map[string]int32{
		"CONVERSATION_MEMBER_ROLE_UNSPECIFIED": 0,
		"CONVERSATION_MEMBER_ROLE_MEMBER":      1,
		"CONVERSATION_MEMBER_ROLE_ADMIN":       2,
		"CONVERSATION_MEMBER_ROLE_OWNER":       3,
	}
)

func (x ConversationMemberRole) Enum() *ConversationMemberRole {
	p := new(ConversationMemberRole)
	*p = x
	return p
}

func (x ConversationMemberRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationMemberRole) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_types_proto_enumTypes[2].Descriptor()
}

func (ConversationMemberRole) Type() protoreflect.EnumType {
	return &file_common_v1_types_proto_enumTypes[2]
}

func (x ConversationMemberRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationMemberRole.Descriptor instead.
func (ConversationMemberRole) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{2}
}

// UserStatus 用户状态
// 定义用户账户的状态
type UserStatus int32

const (
	// 未指定状态
	UserStatus_USER_STATUS_UNSPECIFIED UserStatus = 0
	// 正常状态
	UserStatus_USER_STATUS_NORMAL UserStatus = 1
	// 已禁用
	UserStatus_USER_STATUS_DISABLED UserStatus = 2
	// 待删除/回收
	UserStatus_USER_STATUS_PENDING_DELETE UserStatus = 3
	// 已删除
	UserStatus_USER_STATUS_DELETED UserStatus = 4
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "USER_STATUS_UNSPECIFIED",
		1: "USER_STATUS_NORMAL",
		2: "USER_STATUS_DISABLED",
		3: "USER_STATUS_PENDING_DELETE",
		4: "USER_STATUS_DELETED",
	}
	UserStatus_value = map[string]int32{
		"USER_STATUS_UNSPECIFIED":    0,
		"USER_STATUS_NORMAL":         1,
		"USER_STATUS_DISABLED":       2,
		"USER_STATUS_PENDING_DELETE": 3,
		"USER_STATUS_DELETED":        4,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_types_proto_enumTypes[3].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_common_v1_types_proto_enumTypes[3]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{3}
}

// OnlineStatus 在线状态
// 定义用户的在线状态
type OnlineStatus int32

const (
	// 未指定状态
	OnlineStatus_ONLINE_STATUS_UNSPECIFIED OnlineStatus = 0
	// 离线
	OnlineStatus_ONLINE_STATUS_OFFLINE OnlineStatus = 1
	// 在线
	OnlineStatus_ONLINE_STATUS_ONLINE OnlineStatus = 2
	// 忙碌
	OnlineStatus_ONLINE_STATUS_BUSY OnlineStatus = 3
	// 离开
	OnlineStatus_ONLINE_STATUS_AWAY OnlineStatus = 4
	// 隐身
	OnlineStatus_ONLINE_STATUS_INVISIBLE OnlineStatus = 5
)

// Enum value maps for OnlineStatus.
var (
	OnlineStatus_name = map[int32]string{
		0: "ONLINE_STATUS_UNSPECIFIED",
		1: "ONLINE_STATUS_OFFLINE",
		2: "ONLINE_STATUS_ONLINE",
		3: "ONLINE_STATUS_BUSY",
		4: "ONLINE_STATUS_AWAY",
		5: "ONLINE_STATUS_INVISIBLE",
	}
	OnlineStatus_value = map[string]int32{
		"ONLINE_STATUS_UNSPECIFIED": 0,
		"ONLINE_STATUS_OFFLINE":     1,
		"ONLINE_STATUS_ONLINE":      2,
		"ONLINE_STATUS_BUSY":        3,
		"ONLINE_STATUS_AWAY":        4,
		"ONLINE_STATUS_INVISIBLE":   5,
	}
)

func (x OnlineStatus) Enum() *OnlineStatus {
	p := new(OnlineStatus)
	*p = x
	return p
}

func (x OnlineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnlineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_types_proto_enumTypes[4].Descriptor()
}

func (OnlineStatus) Type() protoreflect.EnumType {
	return &file_common_v1_types_proto_enumTypes[4]
}

func (x OnlineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnlineStatus.Descriptor instead.
func (OnlineStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{4}
}

// ErrorCode 统一错误码
// 定义系统通用的错误码
type ErrorCode int32

const (
	// 未指定错误码，通常表示成功
	ErrorCode_ERROR_CODE_UNSPECIFIED ErrorCode = 0
	// === 通用错误 1000-1999 ===
	// 内部错误
	ErrorCode_ERROR_CODE_INTERNAL_ERROR ErrorCode = 1000
	// 参数无效
	ErrorCode_ERROR_CODE_INVALID_PARAMETER ErrorCode = 1001
	// 未授权
	ErrorCode_ERROR_CODE_UNAUTHORIZED ErrorCode = 1002
	// 禁止访问
	ErrorCode_ERROR_CODE_FORBIDDEN ErrorCode = 1003
	// 资源未找到
	ErrorCode_ERROR_CODE_NOT_FOUND ErrorCode = 1004
	// 请求过于频繁
	ErrorCode_ERROR_CODE_RATE_LIMITED ErrorCode = 1005
	// 服务不可用
	ErrorCode_ERROR_CODE_SERVICE_UNAVAILABLE ErrorCode = 1006
	// 请求超时
	ErrorCode_ERROR_CODE_TIMEOUT ErrorCode = 1007
	// === 用户相关错误 2000-2999 ===
	// 用户不存在
	ErrorCode_ERROR_CODE_USER_NOT_FOUND ErrorCode = 2000
	// 用户已存在
	ErrorCode_ERROR_CODE_USER_ALREADY_EXISTS ErrorCode = 2001
	// 密码错误
	ErrorCode_ERROR_CODE_INVALID_PASSWORD ErrorCode = 2002
	// 令牌无效
	ErrorCode_ERROR_CODE_INVALID_TOKEN ErrorCode = 2003
	// 令牌已过期
	ErrorCode_ERROR_CODE_TOKEN_EXPIRED ErrorCode = 2004
	// 用户已被禁用
	ErrorCode_ERROR_CODE_USER_DISABLED ErrorCode = 2005
	// 用户名格式无效
	ErrorCode_ERROR_CODE_INVALID_USERNAME ErrorCode = 2006
	// 密码强度不够
	ErrorCode_ERROR_CODE_WEAK_PASSWORD ErrorCode = 2007
	// === 消息相关错误 3000-3999 ===
	// 消息不存在
	ErrorCode_ERROR_CODE_MESSAGE_NOT_FOUND ErrorCode = 3000
	// 重复消息
	ErrorCode_ERROR_CODE_DUPLICATE_MESSAGE ErrorCode = 3001
	// 消息格式无效
	ErrorCode_ERROR_CODE_INVALID_MESSAGE_FORMAT ErrorCode = 3002
	// 消息内容过长
	ErrorCode_ERROR_CODE_MESSAGE_TOO_LONG ErrorCode = 3003
	// 消息内容为空
	ErrorCode_ERROR_CODE_MESSAGE_EMPTY ErrorCode = 3004
	// 不支持的消息类型
	ErrorCode_ERROR_CODE_UNSUPPORTED_MESSAGE_TYPE ErrorCode = 3005
	// 消息已被撤回
	ErrorCode_ERROR_CODE_MESSAGE_RECALLED ErrorCode = 3006
	// 消息撤回时间超限
	ErrorCode_ERROR_CODE_RECALL_TIME_EXCEEDED ErrorCode = 3007
	// === 会话相关错误 4000-4999 ===
	// 会话不存在
	ErrorCode_ERROR_CODE_CONVERSATION_NOT_FOUND ErrorCode = 4000
	// 不是会话成员
	ErrorCode_ERROR_CODE_NOT_CONVERSATION_MEMBER ErrorCode = 4001
	// 会话成员已满
	ErrorCode_ERROR_CODE_CONVERSATION_FULL ErrorCode = 4002
	// 权限不足
	ErrorCode_ERROR_CODE_INSUFFICIENT_PERMISSION ErrorCode = 4003
	// 会话已被解散
	ErrorCode_ERROR_CODE_CONVERSATION_DISSOLVED ErrorCode = 4004
	// 用户已在会话中
	ErrorCode_ERROR_CODE_USER_ALREADY_IN_CONVERSATION ErrorCode = 4005
	// 会话名称无效
	ErrorCode_ERROR_CODE_INVALID_CONVERSATION_NAME ErrorCode = 4006
	// 无法离开会话（如群主）
	ErrorCode_ERROR_CODE_CANNOT_LEAVE_CONVERSATION ErrorCode = 4007
	// === 好友相关错误 5000-5999 ===
	// 好友申请不存在
	ErrorCode_ERROR_CODE_FRIEND_REQUEST_NOT_FOUND ErrorCode = 5000
	// 好友申请已存在
	ErrorCode_ERROR_CODE_FRIEND_REQUEST_ALREADY_EXISTS ErrorCode = 5001
	// 已经是好友关系
	ErrorCode_ERROR_CODE_ALREADY_FRIENDS ErrorCode = 5002
	// 不是好友关系
	ErrorCode_ERROR_CODE_NOT_FRIENDS ErrorCode = 5003
	// 无法添加自己为好友
	ErrorCode_ERROR_CODE_CANNOT_ADD_SELF_AS_FRIEND ErrorCode = 5004
	// 好友申请已处理
	ErrorCode_ERROR_CODE_FRIEND_REQUEST_ALREADY_HANDLED ErrorCode = 5005
	// === 文件相关错误 6000-6999 ===
	// 文件不存在
	ErrorCode_ERROR_CODE_FILE_NOT_FOUND ErrorCode = 6000
	// 文件格式不支持
	ErrorCode_ERROR_CODE_UNSUPPORTED_FILE_FORMAT ErrorCode = 6001
	// 文件大小超限
	ErrorCode_ERROR_CODE_FILE_TOO_LARGE ErrorCode = 6002
	// 文件上传失败
	ErrorCode_ERROR_CODE_FILE_UPLOAD_FAILED ErrorCode = 6003
	// 文件下载失败
	ErrorCode_ERROR_CODE_FILE_DOWNLOAD_FAILED ErrorCode = 6004
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:    "ERROR_CODE_UNSPECIFIED",
		1000: "ERROR_CODE_INTERNAL_ERROR",
		1001: "ERROR_CODE_INVALID_PARAMETER",
		1002: "ERROR_CODE_UNAUTHORIZED",
		1003: "ERROR_CODE_FORBIDDEN",
		1004: "ERROR_CODE_NOT_FOUND",
		1005: "ERROR_CODE_RATE_LIMITED",
		1006: "ERROR_CODE_SERVICE_UNAVAILABLE",
		1007: "ERROR_CODE_TIMEOUT",
		2000: "ERROR_CODE_USER_NOT_FOUND",
		2001: "ERROR_CODE_USER_ALREADY_EXISTS",
		2002: "ERROR_CODE_INVALID_PASSWORD",
		2003: "ERROR_CODE_INVALID_TOKEN",
		2004: "ERROR_CODE_TOKEN_EXPIRED",
		2005: "ERROR_CODE_USER_DISABLED",
		2006: "ERROR_CODE_INVALID_USERNAME",
		2007: "ERROR_CODE_WEAK_PASSWORD",
		3000: "ERROR_CODE_MESSAGE_NOT_FOUND",
		3001: "ERROR_CODE_DUPLICATE_MESSAGE",
		3002: "ERROR_CODE_INVALID_MESSAGE_FORMAT",
		3003: "ERROR_CODE_MESSAGE_TOO_LONG",
		3004: "ERROR_CODE_MESSAGE_EMPTY",
		3005: "ERROR_CODE_UNSUPPORTED_MESSAGE_TYPE",
		3006: "ERROR_CODE_MESSAGE_RECALLED",
		3007: "ERROR_CODE_RECALL_TIME_EXCEEDED",
		4000: "ERROR_CODE_CONVERSATION_NOT_FOUND",
		4001: "ERROR_CODE_NOT_CONVERSATION_MEMBER",
		4002: "ERROR_CODE_CONVERSATION_FULL",
		4003: "ERROR_CODE_INSUFFICIENT_PERMISSION",
		4004: "ERROR_CODE_CONVERSATION_DISSOLVED",
		4005: "ERROR_CODE_USER_ALREADY_IN_CONVERSATION",
		4006: "ERROR_CODE_INVALID_CONVERSATION_NAME",
		4007: "ERROR_CODE_CANNOT_LEAVE_CONVERSATION",
		5000: "ERROR_CODE_FRIEND_REQUEST_NOT_FOUND",
		5001: "ERROR_CODE_FRIEND_REQUEST_ALREADY_EXISTS",
		5002: "ERROR_CODE_ALREADY_FRIENDS",
		5003: "ERROR_CODE_NOT_FRIENDS",
		5004: "ERROR_CODE_CANNOT_ADD_SELF_AS_FRIEND",
		5005: "ERROR_CODE_FRIEND_REQUEST_ALREADY_HANDLED",
		6000: "ERROR_CODE_FILE_NOT_FOUND",
		6001: "ERROR_CODE_UNSUPPORTED_FILE_FORMAT",
		6002: "ERROR_CODE_FILE_TOO_LARGE",
		6003: "ERROR_CODE_FILE_UPLOAD_FAILED",
		6004: "ERROR_CODE_FILE_DOWNLOAD_FAILED",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":                    0,
		"ERROR_CODE_INTERNAL_ERROR":                 1000,
		"ERROR_CODE_INVALID_PARAMETER":              1001,
		"ERROR_CODE_UNAUTHORIZED":                   1002,
		"ERROR_CODE_FORBIDDEN":                      1003,
		"ERROR_CODE_NOT_FOUND":                      1004,
		"ERROR_CODE_RATE_LIMITED":                   1005,
		"ERROR_CODE_SERVICE_UNAVAILABLE":            1006,
		"ERROR_CODE_TIMEOUT":                        1007,
		"ERROR_CODE_USER_NOT_FOUND":                 2000,
		"ERROR_CODE_USER_ALREADY_EXISTS":            2001,
		"ERROR_CODE_INVALID_PASSWORD":               2002,
		"ERROR_CODE_INVALID_TOKEN":                  2003,
		"ERROR_CODE_TOKEN_EXPIRED":                  2004,
		"ERROR_CODE_USER_DISABLED":                  2005,
		"ERROR_CODE_INVALID_USERNAME":               2006,
		"ERROR_CODE_WEAK_PASSWORD":                  2007,
		"ERROR_CODE_MESSAGE_NOT_FOUND":              3000,
		"ERROR_CODE_DUPLICATE_MESSAGE":              3001,
		"ERROR_CODE_INVALID_MESSAGE_FORMAT":         3002,
		"ERROR_CODE_MESSAGE_TOO_LONG":               3003,
		"ERROR_CODE_MESSAGE_EMPTY":                  3004,
		"ERROR_CODE_UNSUPPORTED_MESSAGE_TYPE":       3005,
		"ERROR_CODE_MESSAGE_RECALLED":               3006,
		"ERROR_CODE_RECALL_TIME_EXCEEDED":           3007,
		"ERROR_CODE_CONVERSATION_NOT_FOUND":         4000,
		"ERROR_CODE_NOT_CONVERSATION_MEMBER":        4001,
		"ERROR_CODE_CONVERSATION_FULL":              4002,
		"ERROR_CODE_INSUFFICIENT_PERMISSION":        4003,
		"ERROR_CODE_CONVERSATION_DISSOLVED":         4004,
		"ERROR_CODE_USER_ALREADY_IN_CONVERSATION":   4005,
		"ERROR_CODE_INVALID_CONVERSATION_NAME":      4006,
		"ERROR_CODE_CANNOT_LEAVE_CONVERSATION":      4007,
		"ERROR_CODE_FRIEND_REQUEST_NOT_FOUND":       5000,
		"ERROR_CODE_FRIEND_REQUEST_ALREADY_EXISTS":  5001,
		"ERROR_CODE_ALREADY_FRIENDS":                5002,
		"ERROR_CODE_NOT_FRIENDS":                    5003,
		"ERROR_CODE_CANNOT_ADD_SELF_AS_FRIEND":      5004,
		"ERROR_CODE_FRIEND_REQUEST_ALREADY_HANDLED": 5005,
		"ERROR_CODE_FILE_NOT_FOUND":                 6000,
		"ERROR_CODE_UNSUPPORTED_FILE_FORMAT":        6001,
		"ERROR_CODE_FILE_TOO_LARGE":                 6002,
		"ERROR_CODE_FILE_UPLOAD_FAILED":             6003,
		"ERROR_CODE_FILE_DOWNLOAD_FAILED":           6004,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_types_proto_enumTypes[5].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_common_v1_types_proto_enumTypes[5]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{5}
}

// Pagination 分页信息
// 统一的分页参数定义
type Pagination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 页码（从 1 开始）
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 总数量
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 总页数
	TotalPages int32 `protobuf:"varint,4,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	// 是否有下一页
	HasNext bool `protobuf:"varint,5,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	// 是否有上一页
	HasPrev       bool `protobuf:"varint,6,opt,name=has_prev,json=hasPrev,proto3" json:"has_prev,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_common_v1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *Pagination) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *Pagination) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Pagination) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *Pagination) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *Pagination) GetHasPrev() bool {
	if x != nil {
		return x.HasPrev
	}
	return false
}

// Cursor 游标分页信息
// 用于高性能的游标分页
type Cursor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 游标值（通常是时间戳或序列号）
	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// 限制数量
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 是否还有更多数据
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 下一页游标
	NextCursor    string `protobuf:"bytes,4,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	mi := &file_common_v1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *Cursor) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *Cursor) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Cursor) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *Cursor) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

// UserInfo 轻量级用户信息
// 用于在其他对象中嵌入基本用户信息
type UserInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 用户名
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// 头像 URL
	AvatarUrl string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// 是否为游客
	IsGuest bool `protobuf:"varint,4,opt,name=is_guest,json=isGuest,proto3" json:"is_guest,omitempty"`
	// 在线状态
	OnlineStatus  OnlineStatus `protobuf:"varint,5,opt,name=online_status,json=onlineStatus,proto3,enum=common.v1.OnlineStatus" json:"online_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_common_v1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserInfo) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

func (x *UserInfo) GetOnlineStatus() OnlineStatus {
	if x != nil {
		return x.OnlineStatus
	}
	return OnlineStatus_ONLINE_STATUS_UNSPECIFIED
}

// ConversationInfo 轻量级会话信息
// 用于在其他对象中嵌入基本会话信息
type ConversationInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话 ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 会话类型
	Type ConversationType `protobuf:"varint,2,opt,name=type,proto3,enum=common.v1.ConversationType" json:"type,omitempty"`
	// 会话名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 会话头像 URL
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// 成员数量
	MemberCount   int32 `protobuf:"varint,5,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversationInfo) Reset() {
	*x = ConversationInfo{}
	mi := &file_common_v1_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationInfo) ProtoMessage() {}

func (x *ConversationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationInfo.ProtoReflect.Descriptor instead.
func (*ConversationInfo) Descriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *ConversationInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConversationInfo) GetType() ConversationType {
	if x != nil {
		return x.Type
	}
	return ConversationType_CONVERSATION_TYPE_UNSPECIFIED
}

func (x *ConversationInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConversationInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *ConversationInfo) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

// Timestamp 时间戳
// 统一的时间表示
type Timestamp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unix 时间戳（秒）
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// 纳秒部分
	Nanos         int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	mi := &file_common_v1_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

// Location 地理位置信息
// 用于位置消息
type Location struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 纬度
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 经度
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 地址描述
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// 精度（米）
	Accuracy      float64 `protobuf:"fixed64,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_common_v1_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Location) GetAccuracy() float64 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

// FileInfo 文件信息
// 用于文件类型的消息
type FileInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 文件名
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// 文件大小（字节）
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// MIME 类型
	MimeType string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// 文件 URL
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// 文件哈希值（用于去重和校验）
	Hash string `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	// 缩略图 URL（图片/视频文件）
	ThumbnailUrl string `protobuf:"bytes,6,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	// 持续时间（音频/视频文件，单位：秒）
	Duration      int32 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_common_v1_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *FileInfo) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FileInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *FileInfo) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *FileInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Metadata 通用元数据
// 用于扩展其他消息的元数据信息
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 键值对形式的元数据
	Fields map[string]string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 创建时间
	CreatedAt int64 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt     int64 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_common_v1_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_common_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *Metadata) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Metadata) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Metadata) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

var File_common_v1_types_proto protoreflect.FileDescriptor

const file_common_v1_types_proto_rawDesc = "" +
	"\n" +
	"\x15common/v1/types.proto\x12\tcommon.v1\"\xaa\x01\n" +
	"\n" +
	"Pagination\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x03R\x05total\x12\x1f\n" +
	"\vtotal_pages\x18\x04 \x01(\x05R\n" +
	"totalPages\x12\x19\n" +
	"\bhas_next\x18\x05 \x01(\bR\ahasNext\x12\x19\n" +
	"\bhas_prev\x18\x06 \x01(\bR\ahasPrev\"r\n" +
	"\x06Cursor\x12\x16\n" +
	"\x06cursor\x18\x01 \x01(\tR\x06cursor\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\x12\x1f\n" +
	"\vnext_cursor\x18\x04 \x01(\tR\n" +
	"nextCursor\"\xae\x01\n" +
	"\bUserInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\x03 \x01(\tR\tavatarUrl\x12\x19\n" +
	"\bis_guest\x18\x04 \x01(\bR\aisGuest\x12<\n" +
	"\ronline_status\x18\x05 \x01(\x0e2\x17.common.v1.OnlineStatusR\fonlineStatus\"\xa9\x01\n" +
	"\x10ConversationInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12/\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1b.common.v1.ConversationTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\x04 \x01(\tR\tavatarUrl\x12!\n" +
	"\fmember_count\x18\x05 \x01(\x05R\vmemberCount\";\n" +
	"\tTimestamp\x12\x18\n" +
	"\aseconds\x18\x01 \x01(\x03R\aseconds\x12\x14\n" +
	"\x05nanos\x18\x02 \x01(\x05R\x05nanos\"z\n" +
	"\bLocation\x12\x1a\n" +
	"\blatitude\x18\x01 \x01(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x02 \x01(\x01R\tlongitude\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x1a\n" +
	"\baccuracy\x18\x04 \x01(\x01R\baccuracy\"\xbe\x01\n" +
	"\bFileInfo\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\x12\x12\n" +
	"\x04hash\x18\x05 \x01(\tR\x04hash\x12#\n" +
	"\rthumbnail_url\x18\x06 \x01(\tR\fthumbnailUrl\x12\x1a\n" +
	"\bduration\x18\a \x01(\x05R\bduration\"\xbc\x01\n" +
	"\bMetadata\x127\n" +
	"\x06fields\x18\x01 \x03(\v2\x1f.common.v1.Metadata.FieldsEntryR\x06fields\x12\x1d\n" +
	"\n" +
	"created_at\x18\x02 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x03 \x01(\x03R\tupdatedAt\x1a9\n" +
	"\vFieldsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*\x8d\x01\n" +
	"\x10ConversationType\x12!\n" +
	"\x1dCONVERSATION_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18CONVERSATION_TYPE_SINGLE\x10\x01\x12\x1b\n" +
	"\x17CONVERSATION_TYPE_GROUP\x10\x02\x12\x1b\n" +
	"\x17CONVERSATION_TYPE_WORLD\x10\x03*\x9e\x02\n" +
	"\vMessageType\x12\x1c\n" +
	"\x18MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11MESSAGE_TYPE_TEXT\x10\x01\x12\x16\n" +
	"\x12MESSAGE_TYPE_IMAGE\x10\x02\x12\x15\n" +
	"\x11MESSAGE_TYPE_FILE\x10\x03\x12\x17\n" +
	"\x13MESSAGE_TYPE_SYSTEM\x10\x04\x12\x16\n" +
	"\x12MESSAGE_TYPE_VOICE\x10\x05\x12\x16\n" +
	"\x12MESSAGE_TYPE_VIDEO\x10\x06\x12\x19\n" +
	"\x15MESSAGE_TYPE_LOCATION\x10\a\x12\x15\n" +
	"\x11MESSAGE_TYPE_LINK\x10\b\x12\x16\n" +
	"\x12MESSAGE_TYPE_EMOJI\x10\t\x12\x18\n" +
	"\x14MESSAGE_TYPE_FORWARD\x10\n" +
	"*\xaf\x01\n" +
	"\x16ConversationMemberRole\x12(\n" +
	"$CONVERSATION_MEMBER_ROLE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fCONVERSATION_MEMBER_ROLE_MEMBER\x10\x01\x12\"\n" +
	"\x1eCONVERSATION_MEMBER_ROLE_ADMIN\x10\x02\x12\"\n" +
	"\x1eCONVERSATION_MEMBER_ROLE_OWNER\x10\x03*\x94\x01\n" +
	"\n" +
	"UserStatus\x12\x1b\n" +
	"\x17USER_STATUS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12USER_STATUS_NORMAL\x10\x01\x12\x18\n" +
	"\x14USER_STATUS_DISABLED\x10\x02\x12\x1e\n" +
	"\x1aUSER_STATUS_PENDING_DELETE\x10\x03\x12\x17\n" +
	"\x13USER_STATUS_DELETED\x10\x04*\xaf\x01\n" +
	"\fOnlineStatus\x12\x1d\n" +
	"\x19ONLINE_STATUS_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ONLINE_STATUS_OFFLINE\x10\x01\x12\x18\n" +
	"\x14ONLINE_STATUS_ONLINE\x10\x02\x12\x16\n" +
	"\x12ONLINE_STATUS_BUSY\x10\x03\x12\x16\n" +
	"\x12ONLINE_STATUS_AWAY\x10\x04\x12\x1b\n" +
	"\x17ONLINE_STATUS_INVISIBLE\x10\x05*\xae\f\n" +
	"\tErrorCode\x12\x1a\n" +
	"\x16ERROR_CODE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x19ERROR_CODE_INTERNAL_ERROR\x10\xe8\a\x12!\n" +
	"\x1cERROR_CODE_INVALID_PARAMETER\x10\xe9\a\x12\x1c\n" +
	"\x17ERROR_CODE_UNAUTHORIZED\x10\xea\a\x12\x19\n" +
	"\x14ERROR_CODE_FORBIDDEN\x10\xeb\a\x12\x19\n" +
	"\x14ERROR_CODE_NOT_FOUND\x10\xec\a\x12\x1c\n" +
	"\x17ERROR_CODE_RATE_LIMITED\x10\xed\a\x12#\n" +
	"\x1eERROR_CODE_SERVICE_UNAVAILABLE\x10\xee\a\x12\x17\n" +
	"\x12ERROR_CODE_TIMEOUT\x10\xef\a\x12\x1e\n" +
	"\x19ERROR_CODE_USER_NOT_FOUND\x10\xd0\x0f\x12#\n" +
	"\x1eERROR_CODE_USER_ALREADY_EXISTS\x10\xd1\x0f\x12 \n" +
	"\x1bERROR_CODE_INVALID_PASSWORD\x10\xd2\x0f\x12\x1d\n" +
	"\x18ERROR_CODE_INVALID_TOKEN\x10\xd3\x0f\x12\x1d\n" +
	"\x18ERROR_CODE_TOKEN_EXPIRED\x10\xd4\x0f\x12\x1d\n" +
	"\x18ERROR_CODE_USER_DISABLED\x10\xd5\x0f\x12 \n" +
	"\x1bERROR_CODE_INVALID_USERNAME\x10\xd6\x0f\x12\x1d\n" +
	"\x18ERROR_CODE_WEAK_PASSWORD\x10\xd7\x0f\x12!\n" +
	"\x1cERROR_CODE_MESSAGE_NOT_FOUND\x10\xb8\x17\x12!\n" +
	"\x1cERROR_CODE_DUPLICATE_MESSAGE\x10\xb9\x17\x12&\n" +
	"!ERROR_CODE_INVALID_MESSAGE_FORMAT\x10\xba\x17\x12 \n" +
	"\x1bERROR_CODE_MESSAGE_TOO_LONG\x10\xbb\x17\x12\x1d\n" +
	"\x18ERROR_CODE_MESSAGE_EMPTY\x10\xbc\x17\x12(\n" +
	"#ERROR_CODE_UNSUPPORTED_MESSAGE_TYPE\x10\xbd\x17\x12 \n" +
	"\x1bERROR_CODE_MESSAGE_RECALLED\x10\xbe\x17\x12$\n" +
	"\x1fERROR_CODE_RECALL_TIME_EXCEEDED\x10\xbf\x17\x12&\n" +
	"!ERROR_CODE_CONVERSATION_NOT_FOUND\x10\xa0\x1f\x12'\n" +
	"\"ERROR_CODE_NOT_CONVERSATION_MEMBER\x10\xa1\x1f\x12!\n" +
	"\x1cERROR_CODE_CONVERSATION_FULL\x10\xa2\x1f\x12'\n" +
	"\"ERROR_CODE_INSUFFICIENT_PERMISSION\x10\xa3\x1f\x12&\n" +
	"!ERROR_CODE_CONVERSATION_DISSOLVED\x10\xa4\x1f\x12,\n" +
	"'ERROR_CODE_USER_ALREADY_IN_CONVERSATION\x10\xa5\x1f\x12)\n" +
	"$ERROR_CODE_INVALID_CONVERSATION_NAME\x10\xa6\x1f\x12)\n" +
	"$ERROR_CODE_CANNOT_LEAVE_CONVERSATION\x10\xa7\x1f\x12(\n" +
	"#ERROR_CODE_FRIEND_REQUEST_NOT_FOUND\x10\x88'\x12-\n" +
	"(ERROR_CODE_FRIEND_REQUEST_ALREADY_EXISTS\x10\x89'\x12\x1f\n" +
	"\x1aERROR_CODE_ALREADY_FRIENDS\x10\x8a'\x12\x1b\n" +
	"\x16ERROR_CODE_NOT_FRIENDS\x10\x8b'\x12)\n" +
	"$ERROR_CODE_CANNOT_ADD_SELF_AS_FRIEND\x10\x8c'\x12.\n" +
	")ERROR_CODE_FRIEND_REQUEST_ALREADY_HANDLED\x10\x8d'\x12\x1e\n" +
	"\x19ERROR_CODE_FILE_NOT_FOUND\x10\xf0.\x12'\n" +
	"\"ERROR_CODE_UNSUPPORTED_FILE_FORMAT\x10\xf1.\x12\x1e\n" +
	"\x19ERROR_CODE_FILE_TOO_LARGE\x10\xf2.\x12\"\n" +
	"\x1dERROR_CODE_FILE_UPLOAD_FAILED\x10\xf3.\x12$\n" +
	"\x1fERROR_CODE_FILE_DOWNLOAD_FAILED\x10\xf4.B6Z4github.com/ceyewan/gochat/api/gen/common/v1;commonv1b\x06proto3"

var (
	file_common_v1_types_proto_rawDescOnce sync.Once
	file_common_v1_types_proto_rawDescData []byte
)

func file_common_v1_types_proto_rawDescGZIP() []byte {
	file_common_v1_types_proto_rawDescOnce.Do(func() {
		file_common_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_v1_types_proto_rawDesc), len(file_common_v1_types_proto_rawDesc)))
	})
	return file_common_v1_types_proto_rawDescData
}

var file_common_v1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_common_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_common_v1_types_proto_goTypes = []any{
	(ConversationType)(0),       // 0: common.v1.ConversationType
	(MessageType)(0),            // 1: common.v1.MessageType
	(ConversationMemberRole)(0), // 2: common.v1.ConversationMemberRole
	(UserStatus)(0),             // 3: common.v1.UserStatus
	(OnlineStatus)(0),           // 4: common.v1.OnlineStatus
	(ErrorCode)(0),              // 5: common.v1.ErrorCode
	(*Pagination)(nil),          // 6: common.v1.Pagination
	(*Cursor)(nil),              // 7: common.v1.Cursor
	(*UserInfo)(nil),            // 8: common.v1.UserInfo
	(*ConversationInfo)(nil),    // 9: common.v1.ConversationInfo
	(*Timestamp)(nil),           // 10: common.v1.Timestamp
	(*Location)(nil),            // 11: common.v1.Location
	(*FileInfo)(nil),            // 12: common.v1.FileInfo
	(*Metadata)(nil),            // 13: common.v1.Metadata
	nil,                         // 14: common.v1.Metadata.FieldsEntry
}
var file_common_v1_types_proto_depIdxs = []int32{
	4,  // 0: common.v1.UserInfo.online_status:type_name -> common.v1.OnlineStatus
	0,  // 1: common.v1.ConversationInfo.type:type_name -> common.v1.ConversationType
	14, // 2: common.v1.Metadata.fields:type_name -> common.v1.Metadata.FieldsEntry
	3,  // [3:3] is the sub-list for method output_type
	3,  // [3:3] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_common_v1_types_proto_init() }
func file_common_v1_types_proto_init() {
	if File_common_v1_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_v1_types_proto_rawDesc), len(file_common_v1_types_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_types_proto_goTypes,
		DependencyIndexes: file_common_v1_types_proto_depIdxs,
		EnumInfos:         file_common_v1_types_proto_enumTypes,
		MessageInfos:      file_common_v1_types_proto_msgTypes,
	}.Build()
	File_common_v1_types_proto = out.File
	file_common_v1_types_proto_goTypes = nil
	file_common_v1_types_proto_depIdxs = nil
}
