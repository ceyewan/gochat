// im_repo/v1/conversation.proto
// 定义 im-repo 服务的会话数据相关接口

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: im_repo/v1/conversation.proto

package repov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConversationService_GetUserConversations_FullMethodName = "/im.repo.v1.ConversationService/GetUserConversations"
	ConversationService_UpdateReadPointer_FullMethodName    = "/im.repo.v1.ConversationService/UpdateReadPointer"
	ConversationService_GetUnreadCount_FullMethodName       = "/im.repo.v1.ConversationService/GetUnreadCount"
	ConversationService_GetReadPointer_FullMethodName       = "/im.repo.v1.ConversationService/GetReadPointer"
	ConversationService_BatchGetUnreadCounts_FullMethodName = "/im.repo.v1.ConversationService/BatchGetUnreadCounts"
)

// ConversationServiceClient is the client API for ConversationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConversationService 会话数据服务
// 提供会话数据的存储和查询
type ConversationServiceClient interface {
	// GetUserConversations 获取用户会话列表
	// 查询用户参与的所有会话
	GetUserConversations(ctx context.Context, in *GetUserConversationsRequest, opts ...grpc.CallOption) (*GetUserConversationsResponse, error)
	// UpdateReadPointer 更新已读位置
	// 更新用户在指定会话中的已读位置
	UpdateReadPointer(ctx context.Context, in *UpdateReadPointerRequest, opts ...grpc.CallOption) (*UpdateReadPointerResponse, error)
	// GetUnreadCount 获取未读消息数
	// 计算用户在指定会话中的未读消息数量
	GetUnreadCount(ctx context.Context, in *GetUnreadCountRequest, opts ...grpc.CallOption) (*GetUnreadCountResponse, error)
	// GetReadPointer 获取已读位置
	// 获取用户在指定会话中的已读位置
	GetReadPointer(ctx context.Context, in *GetReadPointerRequest, opts ...grpc.CallOption) (*GetReadPointerResponse, error)
	// BatchGetUnreadCounts 批量获取未读消息数
	// 批量查询多个会话的未读消息数
	BatchGetUnreadCounts(ctx context.Context, in *BatchGetUnreadCountsRequest, opts ...grpc.CallOption) (*BatchGetUnreadCountsResponse, error)
}

type conversationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationServiceClient(cc grpc.ClientConnInterface) ConversationServiceClient {
	return &conversationServiceClient{cc}
}

func (c *conversationServiceClient) GetUserConversations(ctx context.Context, in *GetUserConversationsRequest, opts ...grpc.CallOption) (*GetUserConversationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserConversationsResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetUserConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) UpdateReadPointer(ctx context.Context, in *UpdateReadPointerRequest, opts ...grpc.CallOption) (*UpdateReadPointerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReadPointerResponse)
	err := c.cc.Invoke(ctx, ConversationService_UpdateReadPointer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetUnreadCount(ctx context.Context, in *GetUnreadCountRequest, opts ...grpc.CallOption) (*GetUnreadCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnreadCountResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetUnreadCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetReadPointer(ctx context.Context, in *GetReadPointerRequest, opts ...grpc.CallOption) (*GetReadPointerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReadPointerResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetReadPointer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) BatchGetUnreadCounts(ctx context.Context, in *BatchGetUnreadCountsRequest, opts ...grpc.CallOption) (*BatchGetUnreadCountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetUnreadCountsResponse)
	err := c.cc.Invoke(ctx, ConversationService_BatchGetUnreadCounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationServiceServer is the server API for ConversationService service.
// All implementations must embed UnimplementedConversationServiceServer
// for forward compatibility.
//
// ConversationService 会话数据服务
// 提供会话数据的存储和查询
type ConversationServiceServer interface {
	// GetUserConversations 获取用户会话列表
	// 查询用户参与的所有会话
	GetUserConversations(context.Context, *GetUserConversationsRequest) (*GetUserConversationsResponse, error)
	// UpdateReadPointer 更新已读位置
	// 更新用户在指定会话中的已读位置
	UpdateReadPointer(context.Context, *UpdateReadPointerRequest) (*UpdateReadPointerResponse, error)
	// GetUnreadCount 获取未读消息数
	// 计算用户在指定会话中的未读消息数量
	GetUnreadCount(context.Context, *GetUnreadCountRequest) (*GetUnreadCountResponse, error)
	// GetReadPointer 获取已读位置
	// 获取用户在指定会话中的已读位置
	GetReadPointer(context.Context, *GetReadPointerRequest) (*GetReadPointerResponse, error)
	// BatchGetUnreadCounts 批量获取未读消息数
	// 批量查询多个会话的未读消息数
	BatchGetUnreadCounts(context.Context, *BatchGetUnreadCountsRequest) (*BatchGetUnreadCountsResponse, error)
	mustEmbedUnimplementedConversationServiceServer()
}

// UnimplementedConversationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConversationServiceServer struct{}

func (UnimplementedConversationServiceServer) GetUserConversations(context.Context, *GetUserConversationsRequest) (*GetUserConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConversations not implemented")
}
func (UnimplementedConversationServiceServer) UpdateReadPointer(context.Context, *UpdateReadPointerRequest) (*UpdateReadPointerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadPointer not implemented")
}
func (UnimplementedConversationServiceServer) GetUnreadCount(context.Context, *GetUnreadCountRequest) (*GetUnreadCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadCount not implemented")
}
func (UnimplementedConversationServiceServer) GetReadPointer(context.Context, *GetReadPointerRequest) (*GetReadPointerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadPointer not implemented")
}
func (UnimplementedConversationServiceServer) BatchGetUnreadCounts(context.Context, *BatchGetUnreadCountsRequest) (*BatchGetUnreadCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUnreadCounts not implemented")
}
func (UnimplementedConversationServiceServer) mustEmbedUnimplementedConversationServiceServer() {}
func (UnimplementedConversationServiceServer) testEmbeddedByValue()                             {}

// UnsafeConversationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServiceServer will
// result in compilation errors.
type UnsafeConversationServiceServer interface {
	mustEmbedUnimplementedConversationServiceServer()
}

func RegisterConversationServiceServer(s grpc.ServiceRegistrar, srv ConversationServiceServer) {
	// If the following call pancis, it indicates UnimplementedConversationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConversationService_ServiceDesc, srv)
}

func _ConversationService_GetUserConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetUserConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetUserConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetUserConversations(ctx, req.(*GetUserConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_UpdateReadPointer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadPointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).UpdateReadPointer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_UpdateReadPointer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).UpdateReadPointer(ctx, req.(*UpdateReadPointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetUnreadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetUnreadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetUnreadCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetUnreadCount(ctx, req.(*GetUnreadCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetReadPointer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadPointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetReadPointer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetReadPointer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetReadPointer(ctx, req.(*GetReadPointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_BatchGetUnreadCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUnreadCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).BatchGetUnreadCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_BatchGetUnreadCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).BatchGetUnreadCounts(ctx, req.(*BatchGetUnreadCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversationService_ServiceDesc is the grpc.ServiceDesc for ConversationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.repo.v1.ConversationService",
	HandlerType: (*ConversationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserConversations",
			Handler:    _ConversationService_GetUserConversations_Handler,
		},
		{
			MethodName: "UpdateReadPointer",
			Handler:    _ConversationService_UpdateReadPointer_Handler,
		},
		{
			MethodName: "GetUnreadCount",
			Handler:    _ConversationService_GetUnreadCount_Handler,
		},
		{
			MethodName: "GetReadPointer",
			Handler:    _ConversationService_GetReadPointer_Handler,
		},
		{
			MethodName: "BatchGetUnreadCounts",
			Handler:    _ConversationService_BatchGetUnreadCounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im_repo/v1/conversation.proto",
}
