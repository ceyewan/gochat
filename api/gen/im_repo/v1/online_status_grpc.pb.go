// im_repo/v1/online_status.proto
// 定义 im-repo 服务的在线状态相关接口

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: im_repo/v1/online_status.proto

package repov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OnlineStatusService_SetUserOnline_FullMethodName        = "/im.repo.v1.OnlineStatusService/SetUserOnline"
	OnlineStatusService_SetUserOffline_FullMethodName       = "/im.repo.v1.OnlineStatusService/SetUserOffline"
	OnlineStatusService_GetUserOnlineStatus_FullMethodName  = "/im.repo.v1.OnlineStatusService/GetUserOnlineStatus"
	OnlineStatusService_GetUsersOnlineStatus_FullMethodName = "/im.repo.v1.OnlineStatusService/GetUsersOnlineStatus"
	OnlineStatusService_UpdateHeartbeat_FullMethodName      = "/im.repo.v1.OnlineStatusService/UpdateHeartbeat"
	OnlineStatusService_CleanupExpiredStatus_FullMethodName = "/im.repo.v1.OnlineStatusService/CleanupExpiredStatus"
)

// OnlineStatusServiceClient is the client API for OnlineStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OnlineStatusService 在线状态服务
// 提供用户在线状态的管理和查询
type OnlineStatusServiceClient interface {
	// SetUserOnline 设置用户在线状态
	// 将用户标记为在线并记录所在网关
	SetUserOnline(ctx context.Context, in *SetUserOnlineRequest, opts ...grpc.CallOption) (*SetUserOnlineResponse, error)
	// SetUserOffline 设置用户离线状态
	// 将用户标记为离线
	SetUserOffline(ctx context.Context, in *SetUserOfflineRequest, opts ...grpc.CallOption) (*SetUserOfflineResponse, error)
	// GetUserOnlineStatus 获取用户在线状态
	// 查询单个用户的在线状态
	GetUserOnlineStatus(ctx context.Context, in *GetUserOnlineStatusRequest, opts ...grpc.CallOption) (*GetUserOnlineStatusResponse, error)
	// GetUsersOnlineStatus 批量获取用户在线状态
	// 批量查询多个用户的在线状态
	GetUsersOnlineStatus(ctx context.Context, in *GetUsersOnlineStatusRequest, opts ...grpc.CallOption) (*GetUsersOnlineStatusResponse, error)
	// UpdateHeartbeat 更新心跳
	// 更新用户的最后活跃时间
	UpdateHeartbeat(ctx context.Context, in *UpdateHeartbeatRequest, opts ...grpc.CallOption) (*UpdateHeartbeatResponse, error)
	// CleanupExpiredStatus 清理过期状态
	// 清理长时间未活跃的在线状态
	CleanupExpiredStatus(ctx context.Context, in *CleanupExpiredStatusRequest, opts ...grpc.CallOption) (*CleanupExpiredStatusResponse, error)
}

type onlineStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineStatusServiceClient(cc grpc.ClientConnInterface) OnlineStatusServiceClient {
	return &onlineStatusServiceClient{cc}
}

func (c *onlineStatusServiceClient) SetUserOnline(ctx context.Context, in *SetUserOnlineRequest, opts ...grpc.CallOption) (*SetUserOnlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserOnlineResponse)
	err := c.cc.Invoke(ctx, OnlineStatusService_SetUserOnline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineStatusServiceClient) SetUserOffline(ctx context.Context, in *SetUserOfflineRequest, opts ...grpc.CallOption) (*SetUserOfflineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserOfflineResponse)
	err := c.cc.Invoke(ctx, OnlineStatusService_SetUserOffline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineStatusServiceClient) GetUserOnlineStatus(ctx context.Context, in *GetUserOnlineStatusRequest, opts ...grpc.CallOption) (*GetUserOnlineStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserOnlineStatusResponse)
	err := c.cc.Invoke(ctx, OnlineStatusService_GetUserOnlineStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineStatusServiceClient) GetUsersOnlineStatus(ctx context.Context, in *GetUsersOnlineStatusRequest, opts ...grpc.CallOption) (*GetUsersOnlineStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersOnlineStatusResponse)
	err := c.cc.Invoke(ctx, OnlineStatusService_GetUsersOnlineStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineStatusServiceClient) UpdateHeartbeat(ctx context.Context, in *UpdateHeartbeatRequest, opts ...grpc.CallOption) (*UpdateHeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHeartbeatResponse)
	err := c.cc.Invoke(ctx, OnlineStatusService_UpdateHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineStatusServiceClient) CleanupExpiredStatus(ctx context.Context, in *CleanupExpiredStatusRequest, opts ...grpc.CallOption) (*CleanupExpiredStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupExpiredStatusResponse)
	err := c.cc.Invoke(ctx, OnlineStatusService_CleanupExpiredStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineStatusServiceServer is the server API for OnlineStatusService service.
// All implementations must embed UnimplementedOnlineStatusServiceServer
// for forward compatibility.
//
// OnlineStatusService 在线状态服务
// 提供用户在线状态的管理和查询
type OnlineStatusServiceServer interface {
	// SetUserOnline 设置用户在线状态
	// 将用户标记为在线并记录所在网关
	SetUserOnline(context.Context, *SetUserOnlineRequest) (*SetUserOnlineResponse, error)
	// SetUserOffline 设置用户离线状态
	// 将用户标记为离线
	SetUserOffline(context.Context, *SetUserOfflineRequest) (*SetUserOfflineResponse, error)
	// GetUserOnlineStatus 获取用户在线状态
	// 查询单个用户的在线状态
	GetUserOnlineStatus(context.Context, *GetUserOnlineStatusRequest) (*GetUserOnlineStatusResponse, error)
	// GetUsersOnlineStatus 批量获取用户在线状态
	// 批量查询多个用户的在线状态
	GetUsersOnlineStatus(context.Context, *GetUsersOnlineStatusRequest) (*GetUsersOnlineStatusResponse, error)
	// UpdateHeartbeat 更新心跳
	// 更新用户的最后活跃时间
	UpdateHeartbeat(context.Context, *UpdateHeartbeatRequest) (*UpdateHeartbeatResponse, error)
	// CleanupExpiredStatus 清理过期状态
	// 清理长时间未活跃的在线状态
	CleanupExpiredStatus(context.Context, *CleanupExpiredStatusRequest) (*CleanupExpiredStatusResponse, error)
	mustEmbedUnimplementedOnlineStatusServiceServer()
}

// UnimplementedOnlineStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnlineStatusServiceServer struct{}

func (UnimplementedOnlineStatusServiceServer) SetUserOnline(context.Context, *SetUserOnlineRequest) (*SetUserOnlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserOnline not implemented")
}
func (UnimplementedOnlineStatusServiceServer) SetUserOffline(context.Context, *SetUserOfflineRequest) (*SetUserOfflineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserOffline not implemented")
}
func (UnimplementedOnlineStatusServiceServer) GetUserOnlineStatus(context.Context, *GetUserOnlineStatusRequest) (*GetUserOnlineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOnlineStatus not implemented")
}
func (UnimplementedOnlineStatusServiceServer) GetUsersOnlineStatus(context.Context, *GetUsersOnlineStatusRequest) (*GetUsersOnlineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOnlineStatus not implemented")
}
func (UnimplementedOnlineStatusServiceServer) UpdateHeartbeat(context.Context, *UpdateHeartbeatRequest) (*UpdateHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHeartbeat not implemented")
}
func (UnimplementedOnlineStatusServiceServer) CleanupExpiredStatus(context.Context, *CleanupExpiredStatusRequest) (*CleanupExpiredStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupExpiredStatus not implemented")
}
func (UnimplementedOnlineStatusServiceServer) mustEmbedUnimplementedOnlineStatusServiceServer() {}
func (UnimplementedOnlineStatusServiceServer) testEmbeddedByValue()                             {}

// UnsafeOnlineStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineStatusServiceServer will
// result in compilation errors.
type UnsafeOnlineStatusServiceServer interface {
	mustEmbedUnimplementedOnlineStatusServiceServer()
}

func RegisterOnlineStatusServiceServer(s grpc.ServiceRegistrar, srv OnlineStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnlineStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnlineStatusService_ServiceDesc, srv)
}

func _OnlineStatusService_SetUserOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserOnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineStatusServiceServer).SetUserOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineStatusService_SetUserOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineStatusServiceServer).SetUserOnline(ctx, req.(*SetUserOnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineStatusService_SetUserOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserOfflineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineStatusServiceServer).SetUserOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineStatusService_SetUserOffline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineStatusServiceServer).SetUserOffline(ctx, req.(*SetUserOfflineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineStatusService_GetUserOnlineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOnlineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineStatusServiceServer).GetUserOnlineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineStatusService_GetUserOnlineStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineStatusServiceServer).GetUserOnlineStatus(ctx, req.(*GetUserOnlineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineStatusService_GetUsersOnlineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersOnlineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineStatusServiceServer).GetUsersOnlineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineStatusService_GetUsersOnlineStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineStatusServiceServer).GetUsersOnlineStatus(ctx, req.(*GetUsersOnlineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineStatusService_UpdateHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineStatusServiceServer).UpdateHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineStatusService_UpdateHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineStatusServiceServer).UpdateHeartbeat(ctx, req.(*UpdateHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineStatusService_CleanupExpiredStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupExpiredStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineStatusServiceServer).CleanupExpiredStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnlineStatusService_CleanupExpiredStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineStatusServiceServer).CleanupExpiredStatus(ctx, req.(*CleanupExpiredStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnlineStatusService_ServiceDesc is the grpc.ServiceDesc for OnlineStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnlineStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.repo.v1.OnlineStatusService",
	HandlerType: (*OnlineStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUserOnline",
			Handler:    _OnlineStatusService_SetUserOnline_Handler,
		},
		{
			MethodName: "SetUserOffline",
			Handler:    _OnlineStatusService_SetUserOffline_Handler,
		},
		{
			MethodName: "GetUserOnlineStatus",
			Handler:    _OnlineStatusService_GetUserOnlineStatus_Handler,
		},
		{
			MethodName: "GetUsersOnlineStatus",
			Handler:    _OnlineStatusService_GetUsersOnlineStatus_Handler,
		},
		{
			MethodName: "UpdateHeartbeat",
			Handler:    _OnlineStatusService_UpdateHeartbeat_Handler,
		},
		{
			MethodName: "CleanupExpiredStatus",
			Handler:    _OnlineStatusService_CleanupExpiredStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im_repo/v1/online_status.proto",
}
