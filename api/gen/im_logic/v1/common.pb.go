// im_logic/v1/common.proto
// 定义 im-logic 服务的通用数据结构

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: im_logic/v1/common.proto

package logicv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConversationType 会话类型
type ConversationType int32

const (
	// 未指定类型
	ConversationType_CONVERSATION_TYPE_UNSPECIFIED ConversationType = 0
	// 单聊
	ConversationType_CONVERSATION_TYPE_SINGLE ConversationType = 1
	// 群聊
	ConversationType_CONVERSATION_TYPE_GROUP ConversationType = 2
	// 世界聊天室
	ConversationType_CONVERSATION_TYPE_WORLD ConversationType = 3
)

// Enum value maps for ConversationType.
var (
	ConversationType_name = map[int32]string{
		0: "CONVERSATION_TYPE_UNSPECIFIED",
		1: "CONVERSATION_TYPE_SINGLE",
		2: "CONVERSATION_TYPE_GROUP",
		3: "CONVERSATION_TYPE_WORLD",
	}
	ConversationType_value = map[string]int32{
		"CONVERSATION_TYPE_UNSPECIFIED": 0,
		"CONVERSATION_TYPE_SINGLE":      1,
		"CONVERSATION_TYPE_GROUP":       2,
		"CONVERSATION_TYPE_WORLD":       3,
	}
)

func (x ConversationType) Enum() *ConversationType {
	p := new(ConversationType)
	*p = x
	return p
}

func (x ConversationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationType) Descriptor() protoreflect.EnumDescriptor {
	return file_im_logic_v1_common_proto_enumTypes[0].Descriptor()
}

func (ConversationType) Type() protoreflect.EnumType {
	return &file_im_logic_v1_common_proto_enumTypes[0]
}

func (x ConversationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationType.Descriptor instead.
func (ConversationType) EnumDescriptor() ([]byte, []int) {
	return file_im_logic_v1_common_proto_rawDescGZIP(), []int{0}
}

// MessageType 消息类型
type MessageType int32

const (
	// 未指定类型
	MessageType_MESSAGE_TYPE_UNSPECIFIED MessageType = 0
	// 文本消息
	MessageType_MESSAGE_TYPE_TEXT MessageType = 1
	// 图片消息
	MessageType_MESSAGE_TYPE_IMAGE MessageType = 2
	// 文件消息
	MessageType_MESSAGE_TYPE_FILE MessageType = 3
	// 系统消息
	MessageType_MESSAGE_TYPE_SYSTEM MessageType = 4
	// 语音消息
	MessageType_MESSAGE_TYPE_VOICE MessageType = 5
	// 视频消息
	MessageType_MESSAGE_TYPE_VIDEO MessageType = 6
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_TEXT",
		2: "MESSAGE_TYPE_IMAGE",
		3: "MESSAGE_TYPE_FILE",
		4: "MESSAGE_TYPE_SYSTEM",
		5: "MESSAGE_TYPE_VOICE",
		6: "MESSAGE_TYPE_VIDEO",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"MESSAGE_TYPE_TEXT":        1,
		"MESSAGE_TYPE_IMAGE":       2,
		"MESSAGE_TYPE_FILE":        3,
		"MESSAGE_TYPE_SYSTEM":      4,
		"MESSAGE_TYPE_VOICE":       5,
		"MESSAGE_TYPE_VIDEO":       6,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_im_logic_v1_common_proto_enumTypes[1].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_im_logic_v1_common_proto_enumTypes[1]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_im_logic_v1_common_proto_rawDescGZIP(), []int{1}
}

// ErrorCode 错误码
type ErrorCode int32

const (
	// 未指定
	ErrorCode_ERROR_CODE_UNSPECIFIED ErrorCode = 0
	// 成功
	ErrorCode_ERROR_CODE_SUCCESS ErrorCode = 1
	// 内部错误
	ErrorCode_ERROR_CODE_INTERNAL_ERROR ErrorCode = 1000
	// 参数无效
	ErrorCode_ERROR_CODE_INVALID_PARAMETER ErrorCode = 1001
	// 未授权
	ErrorCode_ERROR_CODE_UNAUTHORIZED ErrorCode = 1002
	// 禁止访问
	ErrorCode_ERROR_CODE_FORBIDDEN ErrorCode = 1003
	// 资源未找到
	ErrorCode_ERROR_CODE_NOT_FOUND ErrorCode = 1004
	// 用户不存在
	ErrorCode_ERROR_CODE_USER_NOT_FOUND ErrorCode = 2000
	// 用户已存在
	ErrorCode_ERROR_CODE_USER_EXISTS ErrorCode = 2001
	// 密码错误
	ErrorCode_ERROR_CODE_INVALID_PASSWORD ErrorCode = 2002
	// 令牌无效
	ErrorCode_ERROR_CODE_INVALID_TOKEN ErrorCode = 2003
	// 消息不存在
	ErrorCode_ERROR_CODE_MESSAGE_NOT_FOUND ErrorCode = 3000
	// 重复消息
	ErrorCode_ERROR_CODE_DUPLICATE_MESSAGE ErrorCode = 3001
	// 消息无效
	ErrorCode_ERROR_CODE_INVALID_MESSAGE ErrorCode = 3002
	// 群组不存在
	ErrorCode_ERROR_CODE_GROUP_NOT_FOUND ErrorCode = 4000
	// 不是群组成员
	ErrorCode_ERROR_CODE_NOT_GROUP_MEMBER ErrorCode = 4001
	// 群组已满
	ErrorCode_ERROR_CODE_GROUP_FULL ErrorCode = 4002
	// 权限不足
	ErrorCode_ERROR_CODE_INSUFFICIENT_PERMISSION ErrorCode = 4003
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:    "ERROR_CODE_UNSPECIFIED",
		1:    "ERROR_CODE_SUCCESS",
		1000: "ERROR_CODE_INTERNAL_ERROR",
		1001: "ERROR_CODE_INVALID_PARAMETER",
		1002: "ERROR_CODE_UNAUTHORIZED",
		1003: "ERROR_CODE_FORBIDDEN",
		1004: "ERROR_CODE_NOT_FOUND",
		2000: "ERROR_CODE_USER_NOT_FOUND",
		2001: "ERROR_CODE_USER_EXISTS",
		2002: "ERROR_CODE_INVALID_PASSWORD",
		2003: "ERROR_CODE_INVALID_TOKEN",
		3000: "ERROR_CODE_MESSAGE_NOT_FOUND",
		3001: "ERROR_CODE_DUPLICATE_MESSAGE",
		3002: "ERROR_CODE_INVALID_MESSAGE",
		4000: "ERROR_CODE_GROUP_NOT_FOUND",
		4001: "ERROR_CODE_NOT_GROUP_MEMBER",
		4002: "ERROR_CODE_GROUP_FULL",
		4003: "ERROR_CODE_INSUFFICIENT_PERMISSION",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":             0,
		"ERROR_CODE_SUCCESS":                 1,
		"ERROR_CODE_INTERNAL_ERROR":          1000,
		"ERROR_CODE_INVALID_PARAMETER":       1001,
		"ERROR_CODE_UNAUTHORIZED":            1002,
		"ERROR_CODE_FORBIDDEN":               1003,
		"ERROR_CODE_NOT_FOUND":               1004,
		"ERROR_CODE_USER_NOT_FOUND":          2000,
		"ERROR_CODE_USER_EXISTS":             2001,
		"ERROR_CODE_INVALID_PASSWORD":        2002,
		"ERROR_CODE_INVALID_TOKEN":           2003,
		"ERROR_CODE_MESSAGE_NOT_FOUND":       3000,
		"ERROR_CODE_DUPLICATE_MESSAGE":       3001,
		"ERROR_CODE_INVALID_MESSAGE":         3002,
		"ERROR_CODE_GROUP_NOT_FOUND":         4000,
		"ERROR_CODE_NOT_GROUP_MEMBER":        4001,
		"ERROR_CODE_GROUP_FULL":              4002,
		"ERROR_CODE_INSUFFICIENT_PERMISSION": 4003,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_im_logic_v1_common_proto_enumTypes[2].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_im_logic_v1_common_proto_enumTypes[2]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_im_logic_v1_common_proto_rawDescGZIP(), []int{2}
}

// Message 消息信息
type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 消息 ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 发送者 ID
	SenderId string `protobuf:"bytes,3,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// 消息类型
	Type MessageType `protobuf:"varint,4,opt,name=type,proto3,enum=im.logic.v1.MessageType" json:"type,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 会话内序列号
	SeqId int64 `protobuf:"varint,6,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	// 创建时间（Unix 时间戳）
	CreatedAt int64 `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 发送者信息
	Sender *User `protobuf:"bytes,8,opt,name=sender,proto3" json:"sender,omitempty"`
	// 消息扩展信息（JSON 格式）
	Extra         string `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_im_logic_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *Message) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *Message) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetSeqId() int64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *Message) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Message) GetSender() *User {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Message) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

// User 用户信息
type User struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 用户名
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// 头像 URL
	AvatarUrl string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// 创建时间（Unix 时间戳）
	CreatedAt int64 `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 更新时间（Unix 时间戳）
	UpdatedAt int64 `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// 是否为游客
	IsGuest       bool `protobuf:"varint,6,opt,name=is_guest,json=isGuest,proto3" json:"is_guest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_im_logic_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *User) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *User) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *User) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

// OnlineStatus 在线状态
type OnlineStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 是否在线
	IsOnline bool `protobuf:"varint,2,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	// 所在网关 ID
	GatewayId string `protobuf:"bytes,3,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 最后在线时间（Unix 时间戳）
	LastSeen      int64 `protobuf:"varint,4,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnlineStatus) Reset() {
	*x = OnlineStatus{}
	mi := &file_im_logic_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnlineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineStatus) ProtoMessage() {}

func (x *OnlineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineStatus.ProtoReflect.Descriptor instead.
func (*OnlineStatus) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *OnlineStatus) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OnlineStatus) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *OnlineStatus) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *OnlineStatus) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

// ErrorResponse 错误响应
type ErrorResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=im.logic.v1.ErrorCode" json:"code,omitempty"`
	// 错误消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 请求追踪 ID
	TraceId string `protobuf:"bytes,3,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// 错误详情（可选）
	Details       string `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_im_logic_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *ErrorResponse) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ErrorResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

var File_im_logic_v1_common_proto protoreflect.FileDescriptor

const file_im_logic_v1_common_proto_rawDesc = "" +
	"\n" +
	"\x18im_logic/v1/common.proto\x12\vim.logic.v1\"\x9e\x02\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x1b\n" +
	"\tsender_id\x18\x03 \x01(\tR\bsenderId\x12,\n" +
	"\x04type\x18\x04 \x01(\x0e2\x18.im.logic.v1.MessageTypeR\x04type\x12\x18\n" +
	"\acontent\x18\x05 \x01(\tR\acontent\x12\x15\n" +
	"\x06seq_id\x18\x06 \x01(\x03R\x05seqId\x12\x1d\n" +
	"\n" +
	"created_at\x18\a \x01(\x03R\tcreatedAt\x12)\n" +
	"\x06sender\x18\b \x01(\v2\x11.im.logic.v1.UserR\x06sender\x12\x14\n" +
	"\x05extra\x18\t \x01(\tR\x05extra\"\xaa\x01\n" +
	"\x04User\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\x03 \x01(\tR\tavatarUrl\x12\x1d\n" +
	"\n" +
	"created_at\x18\x04 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x05 \x01(\x03R\tupdatedAt\x12\x19\n" +
	"\bis_guest\x18\x06 \x01(\bR\aisGuest\"\x80\x01\n" +
	"\fOnlineStatus\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\tis_online\x18\x02 \x01(\bR\bisOnline\x12\x1d\n" +
	"\n" +
	"gateway_id\x18\x03 \x01(\tR\tgatewayId\x12\x1b\n" +
	"\tlast_seen\x18\x04 \x01(\x03R\blastSeen\"\x8a\x01\n" +
	"\rErrorResponse\x12*\n" +
	"\x04code\x18\x01 \x01(\x0e2\x16.im.logic.v1.ErrorCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x19\n" +
	"\btrace_id\x18\x03 \x01(\tR\atraceId\x12\x18\n" +
	"\adetails\x18\x04 \x01(\tR\adetails*\x8d\x01\n" +
	"\x10ConversationType\x12!\n" +
	"\x1dCONVERSATION_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18CONVERSATION_TYPE_SINGLE\x10\x01\x12\x1b\n" +
	"\x17CONVERSATION_TYPE_GROUP\x10\x02\x12\x1b\n" +
	"\x17CONVERSATION_TYPE_WORLD\x10\x03*\xba\x01\n" +
	"\vMessageType\x12\x1c\n" +
	"\x18MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11MESSAGE_TYPE_TEXT\x10\x01\x12\x16\n" +
	"\x12MESSAGE_TYPE_IMAGE\x10\x02\x12\x15\n" +
	"\x11MESSAGE_TYPE_FILE\x10\x03\x12\x17\n" +
	"\x13MESSAGE_TYPE_SYSTEM\x10\x04\x12\x16\n" +
	"\x12MESSAGE_TYPE_VOICE\x10\x05\x12\x16\n" +
	"\x12MESSAGE_TYPE_VIDEO\x10\x06*\xc3\x04\n" +
	"\tErrorCode\x12\x1a\n" +
	"\x16ERROR_CODE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12ERROR_CODE_SUCCESS\x10\x01\x12\x1e\n" +
	"\x19ERROR_CODE_INTERNAL_ERROR\x10\xe8\a\x12!\n" +
	"\x1cERROR_CODE_INVALID_PARAMETER\x10\xe9\a\x12\x1c\n" +
	"\x17ERROR_CODE_UNAUTHORIZED\x10\xea\a\x12\x19\n" +
	"\x14ERROR_CODE_FORBIDDEN\x10\xeb\a\x12\x19\n" +
	"\x14ERROR_CODE_NOT_FOUND\x10\xec\a\x12\x1e\n" +
	"\x19ERROR_CODE_USER_NOT_FOUND\x10\xd0\x0f\x12\x1b\n" +
	"\x16ERROR_CODE_USER_EXISTS\x10\xd1\x0f\x12 \n" +
	"\x1bERROR_CODE_INVALID_PASSWORD\x10\xd2\x0f\x12\x1d\n" +
	"\x18ERROR_CODE_INVALID_TOKEN\x10\xd3\x0f\x12!\n" +
	"\x1cERROR_CODE_MESSAGE_NOT_FOUND\x10\xb8\x17\x12!\n" +
	"\x1cERROR_CODE_DUPLICATE_MESSAGE\x10\xb9\x17\x12\x1f\n" +
	"\x1aERROR_CODE_INVALID_MESSAGE\x10\xba\x17\x12\x1f\n" +
	"\x1aERROR_CODE_GROUP_NOT_FOUND\x10\xa0\x1f\x12 \n" +
	"\x1bERROR_CODE_NOT_GROUP_MEMBER\x10\xa1\x1f\x12\x1a\n" +
	"\x15ERROR_CODE_GROUP_FULL\x10\xa2\x1f\x12'\n" +
	"\"ERROR_CODE_INSUFFICIENT_PERMISSION\x10\xa3\x1fB9Z7github.com/ceyewan/gochat/api/proto/im_logic/v1;logicv1b\x06proto3"

var (
	file_im_logic_v1_common_proto_rawDescOnce sync.Once
	file_im_logic_v1_common_proto_rawDescData []byte
)

func file_im_logic_v1_common_proto_rawDescGZIP() []byte {
	file_im_logic_v1_common_proto_rawDescOnce.Do(func() {
		file_im_logic_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_im_logic_v1_common_proto_rawDesc), len(file_im_logic_v1_common_proto_rawDesc)))
	})
	return file_im_logic_v1_common_proto_rawDescData
}

var file_im_logic_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_im_logic_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_im_logic_v1_common_proto_goTypes = []any{
	(ConversationType)(0), // 0: im.logic.v1.ConversationType
	(MessageType)(0),      // 1: im.logic.v1.MessageType
	(ErrorCode)(0),        // 2: im.logic.v1.ErrorCode
	(*Message)(nil),       // 3: im.logic.v1.Message
	(*User)(nil),          // 4: im.logic.v1.User
	(*OnlineStatus)(nil),  // 5: im.logic.v1.OnlineStatus
	(*ErrorResponse)(nil), // 6: im.logic.v1.ErrorResponse
}
var file_im_logic_v1_common_proto_depIdxs = []int32{
	1, // 0: im.logic.v1.Message.type:type_name -> im.logic.v1.MessageType
	4, // 1: im.logic.v1.Message.sender:type_name -> im.logic.v1.User
	2, // 2: im.logic.v1.ErrorResponse.code:type_name -> im.logic.v1.ErrorCode
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_im_logic_v1_common_proto_init() }
func file_im_logic_v1_common_proto_init() {
	if File_im_logic_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_im_logic_v1_common_proto_rawDesc), len(file_im_logic_v1_common_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_im_logic_v1_common_proto_goTypes,
		DependencyIndexes: file_im_logic_v1_common_proto_depIdxs,
		EnumInfos:         file_im_logic_v1_common_proto_enumTypes,
		MessageInfos:      file_im_logic_v1_common_proto_msgTypes,
	}.Build()
	File_im_logic_v1_common_proto = out.File
	file_im_logic_v1_common_proto_goTypes = nil
	file_im_logic_v1_common_proto_depIdxs = nil
}
