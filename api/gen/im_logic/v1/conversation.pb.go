// im_logic/v1/conversation.proto
// 定义 im-logic 服务的统一会话管理相关接口
// 统一处理单聊、群聊、世界聊天室的所有操作

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: im_logic/v1/conversation.proto

package logicv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 会话成员角色
type ConversationMemberRole int32

const (
	// 未指定角色
	ConversationMemberRole_CONVERSATION_MEMBER_ROLE_UNSPECIFIED ConversationMemberRole = 0
	// 普通成员
	ConversationMemberRole_CONVERSATION_MEMBER_ROLE_MEMBER ConversationMemberRole = 1
	// 管理员
	ConversationMemberRole_CONVERSATION_MEMBER_ROLE_ADMIN ConversationMemberRole = 2
	// 群主/所有者
	ConversationMemberRole_CONVERSATION_MEMBER_ROLE_OWNER ConversationMemberRole = 3
)

// Enum value maps for ConversationMemberRole.
var (
	ConversationMemberRole_name = map[int32]string{
		0: "CONVERSATION_MEMBER_ROLE_UNSPECIFIED",
		1: "CONVERSATION_MEMBER_ROLE_MEMBER",
		2: "CONVERSATION_MEMBER_ROLE_ADMIN",
		3: "CONVERSATION_MEMBER_ROLE_OWNER",
	}
	ConversationMemberRole_value = map[string]int32{
		"CONVERSATION_MEMBER_ROLE_UNSPECIFIED": 0,
		"CONVERSATION_MEMBER_ROLE_MEMBER":      1,
		"CONVERSATION_MEMBER_ROLE_ADMIN":       2,
		"CONVERSATION_MEMBER_ROLE_OWNER":       3,
	}
)

func (x ConversationMemberRole) Enum() *ConversationMemberRole {
	p := new(ConversationMemberRole)
	*p = x
	return p
}

func (x ConversationMemberRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationMemberRole) Descriptor() protoreflect.EnumDescriptor {
	return file_im_logic_v1_conversation_proto_enumTypes[0].Descriptor()
}

func (ConversationMemberRole) Type() protoreflect.EnumType {
	return &file_im_logic_v1_conversation_proto_enumTypes[0]
}

func (x ConversationMemberRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationMemberRole.Descriptor instead.
func (ConversationMemberRole) EnumDescriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{0}
}

// CreateConversationRequest 创建会话请求
type CreateConversationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 创建者用户 ID
	CreatorId string `protobuf:"bytes,1,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// 会话类型
	Type ConversationType `protobuf:"varint,2,opt,name=type,proto3,enum=im.logic.v1.ConversationType" json:"type,omitempty"`
	// 会话名称（群聊时必填）
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 会话头像 URL（可选）
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// 会话描述（可选）
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// 初始成员 ID 列表
	MemberIds []string `protobuf:"bytes,6,rep,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
	// 会话配置
	Settings      *ConversationSettings `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConversationRequest) Reset() {
	*x = CreateConversationRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationRequest) ProtoMessage() {}

func (x *CreateConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationRequest.ProtoReflect.Descriptor instead.
func (*CreateConversationRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{0}
}

func (x *CreateConversationRequest) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *CreateConversationRequest) GetType() ConversationType {
	if x != nil {
		return x.Type
	}
	return ConversationType_CONVERSATION_TYPE_UNSPECIFIED
}

func (x *CreateConversationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateConversationRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *CreateConversationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateConversationRequest) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

func (x *CreateConversationRequest) GetSettings() *ConversationSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// CreateConversationResponse 创建会话响应
type CreateConversationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 创建的会话信息
	Conversation  *Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConversationResponse) Reset() {
	*x = CreateConversationResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationResponse) ProtoMessage() {}

func (x *CreateConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationResponse.ProtoReflect.Descriptor instead.
func (*CreateConversationResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{1}
}

func (x *CreateConversationResponse) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// GetConversationRequest 获取会话详情请求
type GetConversationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 请求者用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 是否包含成员列表
	IncludeMembers bool `protobuf:"varint,3,opt,name=include_members,json=includeMembers,proto3" json:"include_members,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetConversationRequest) Reset() {
	*x = GetConversationRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationRequest) ProtoMessage() {}

func (x *GetConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationRequest.ProtoReflect.Descriptor instead.
func (*GetConversationRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{2}
}

func (x *GetConversationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetConversationRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetConversationRequest) GetIncludeMembers() bool {
	if x != nil {
		return x.IncludeMembers
	}
	return false
}

// GetConversationResponse 获取会话详情响应
type GetConversationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话信息
	Conversation *Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// 成员列表（如果请求包含）
	Members       []*ConversationMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationResponse) Reset() {
	*x = GetConversationResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationResponse) ProtoMessage() {}

func (x *GetConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationResponse.ProtoReflect.Descriptor instead.
func (*GetConversationResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{3}
}

func (x *GetConversationResponse) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *GetConversationResponse) GetMembers() []*ConversationMember {
	if x != nil {
		return x.Members
	}
	return nil
}

// GetConversationsRequest 获取会话列表请求
type GetConversationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 页码（从 1 开始）
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 会话类型过滤（可选）
	TypeFilter ConversationType `protobuf:"varint,4,opt,name=type_filter,json=typeFilter,proto3,enum=im.logic.v1.ConversationType" json:"type_filter,omitempty"`
	// 排序方式（默认按更新时间倒序）
	OrderBy       string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationsRequest) Reset() {
	*x = GetConversationsRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsRequest) ProtoMessage() {}

func (x *GetConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsRequest.ProtoReflect.Descriptor instead.
func (*GetConversationsRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{4}
}

func (x *GetConversationsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetConversationsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetConversationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetConversationsRequest) GetTypeFilter() ConversationType {
	if x != nil {
		return x.TypeFilter
	}
	return ConversationType_CONVERSATION_TYPE_UNSPECIFIED
}

func (x *GetConversationsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// GetConversationsResponse 获取会话列表响应
type GetConversationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话列表
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
	// 总数量
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// 当前页码
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 是否还有更多
	HasMore       bool `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationsResponse) Reset() {
	*x = GetConversationsResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsResponse) ProtoMessage() {}

func (x *GetConversationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsResponse.ProtoReflect.Descriptor instead.
func (*GetConversationsResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{5}
}

func (x *GetConversationsResponse) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *GetConversationsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConversationsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetConversationsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetConversationsResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// UpdateConversationRequest 更新会话信息请求
type UpdateConversationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作者用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 新的会话名称（可选）
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 新的会话头像 URL（可选）
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// 新的会话描述（可选）
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// 新的会话配置（可选）
	Settings *ConversationSettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	// 更新字段掩码
	UpdateMask    []string `protobuf:"bytes,7,rep,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConversationRequest) Reset() {
	*x = UpdateConversationRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationRequest) ProtoMessage() {}

func (x *UpdateConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationRequest.ProtoReflect.Descriptor instead.
func (*UpdateConversationRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateConversationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateConversationRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *UpdateConversationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateConversationRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UpdateConversationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateConversationRequest) GetSettings() *ConversationSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *UpdateConversationRequest) GetUpdateMask() []string {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateConversationResponse 更新会话信息响应
type UpdateConversationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 更新后的会话信息
	Conversation  *Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConversationResponse) Reset() {
	*x = UpdateConversationResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationResponse) ProtoMessage() {}

func (x *UpdateConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationResponse.ProtoReflect.Descriptor instead.
func (*UpdateConversationResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateConversationResponse) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// DeleteConversationRequest 删除会话请求
type DeleteConversationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作者用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 删除原因（可选）
	Reason        string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConversationRequest) Reset() {
	*x = DeleteConversationRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationRequest) ProtoMessage() {}

func (x *DeleteConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationRequest.ProtoReflect.Descriptor instead.
func (*DeleteConversationRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteConversationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteConversationRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *DeleteConversationRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// DeleteConversationResponse 删除会话响应
type DeleteConversationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作是否成功
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConversationResponse) Reset() {
	*x = DeleteConversationResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationResponse) ProtoMessage() {}

func (x *DeleteConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationResponse.ProtoReflect.Descriptor instead.
func (*DeleteConversationResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteConversationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// AddMembersRequest 添加成员请求
type AddMembersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作者用户 ID
	OperatorId string `protobuf:"bytes,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 要添加的用户 ID 列表
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// 新成员角色（默认为普通成员）
	Role          ConversationMemberRole `protobuf:"varint,4,opt,name=role,proto3,enum=im.logic.v1.ConversationMemberRole" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMembersRequest) Reset() {
	*x = AddMembersRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMembersRequest) ProtoMessage() {}

func (x *AddMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMembersRequest.ProtoReflect.Descriptor instead.
func (*AddMembersRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{10}
}

func (x *AddMembersRequest) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *AddMembersRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *AddMembersRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *AddMembersRequest) GetRole() ConversationMemberRole {
	if x != nil {
		return x.Role
	}
	return ConversationMemberRole_CONVERSATION_MEMBER_ROLE_UNSPECIFIED
}

// AddMembersResponse 添加成员响应
type AddMembersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 成功添加的用户 ID 列表
	AddedUserIds []string `protobuf:"bytes,2,rep,name=added_user_ids,json=addedUserIds,proto3" json:"added_user_ids,omitempty"`
	// 失败的用户 ID 列表及原因
	FailedUsers   []*FailedUser `protobuf:"bytes,3,rep,name=failed_users,json=failedUsers,proto3" json:"failed_users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMembersResponse) Reset() {
	*x = AddMembersResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMembersResponse) ProtoMessage() {}

func (x *AddMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMembersResponse.ProtoReflect.Descriptor instead.
func (*AddMembersResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{11}
}

func (x *AddMembersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddMembersResponse) GetAddedUserIds() []string {
	if x != nil {
		return x.AddedUserIds
	}
	return nil
}

func (x *AddMembersResponse) GetFailedUsers() []*FailedUser {
	if x != nil {
		return x.FailedUsers
	}
	return nil
}

// RemoveMembersRequest 移除成员请求
type RemoveMembersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作者用户 ID
	OperatorId string `protobuf:"bytes,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 要移除的用户 ID 列表
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// 移除原因（可选）
	Reason        string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveMembersRequest) Reset() {
	*x = RemoveMembersRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMembersRequest) ProtoMessage() {}

func (x *RemoveMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMembersRequest.ProtoReflect.Descriptor instead.
func (*RemoveMembersRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveMembersRequest) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *RemoveMembersRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *RemoveMembersRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *RemoveMembersRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// RemoveMembersResponse 移除成员响应
type RemoveMembersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 成功移除的用户 ID 列表
	RemovedUserIds []string `protobuf:"bytes,2,rep,name=removed_user_ids,json=removedUserIds,proto3" json:"removed_user_ids,omitempty"`
	// 失败的用户 ID 列表及原因
	FailedUsers   []*FailedUser `protobuf:"bytes,3,rep,name=failed_users,json=failedUsers,proto3" json:"failed_users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveMembersResponse) Reset() {
	*x = RemoveMembersResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMembersResponse) ProtoMessage() {}

func (x *RemoveMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMembersResponse.ProtoReflect.Descriptor instead.
func (*RemoveMembersResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveMembersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveMembersResponse) GetRemovedUserIds() []string {
	if x != nil {
		return x.RemovedUserIds
	}
	return nil
}

func (x *RemoveMembersResponse) GetFailedUsers() []*FailedUser {
	if x != nil {
		return x.FailedUsers
	}
	return nil
}

// UpdateMemberRoleRequest 更新成员角色请求
type UpdateMemberRoleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作者用户 ID
	OperatorId string `protobuf:"bytes,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 目标用户 ID
	TargetUserId string `protobuf:"bytes,3,opt,name=target_user_id,json=targetUserId,proto3" json:"target_user_id,omitempty"`
	// 新角色
	NewRole       ConversationMemberRole `protobuf:"varint,4,opt,name=new_role,json=newRole,proto3,enum=im.logic.v1.ConversationMemberRole" json:"new_role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMemberRoleRequest) Reset() {
	*x = UpdateMemberRoleRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMemberRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberRoleRequest) ProtoMessage() {}

func (x *UpdateMemberRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemberRoleRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateMemberRoleRequest) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *UpdateMemberRoleRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *UpdateMemberRoleRequest) GetTargetUserId() string {
	if x != nil {
		return x.TargetUserId
	}
	return ""
}

func (x *UpdateMemberRoleRequest) GetNewRole() ConversationMemberRole {
	if x != nil {
		return x.NewRole
	}
	return ConversationMemberRole_CONVERSATION_MEMBER_ROLE_UNSPECIFIED
}

// UpdateMemberRoleResponse 更新成员角色响应
type UpdateMemberRoleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作是否成功
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMemberRoleResponse) Reset() {
	*x = UpdateMemberRoleResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMemberRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberRoleResponse) ProtoMessage() {}

func (x *UpdateMemberRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberRoleResponse.ProtoReflect.Descriptor instead.
func (*UpdateMemberRoleResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateMemberRoleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// GetMembersRequest 获取成员列表请求
type GetMembersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 请求者用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 页码（从 1 开始）
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 角色过滤（可选）
	RoleFilter    ConversationMemberRole `protobuf:"varint,5,opt,name=role_filter,json=roleFilter,proto3,enum=im.logic.v1.ConversationMemberRole" json:"role_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMembersRequest) Reset() {
	*x = GetMembersRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersRequest) ProtoMessage() {}

func (x *GetMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersRequest.ProtoReflect.Descriptor instead.
func (*GetMembersRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{16}
}

func (x *GetMembersRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetMembersRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetMembersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMembersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMembersRequest) GetRoleFilter() ConversationMemberRole {
	if x != nil {
		return x.RoleFilter
	}
	return ConversationMemberRole_CONVERSATION_MEMBER_ROLE_UNSPECIFIED
}

// GetMembersResponse 获取成员列表响应
type GetMembersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 成员列表
	Members []*ConversationMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	// 总数量
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// 当前页码
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 是否还有更多
	HasMore       bool `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMembersResponse) Reset() {
	*x = GetMembersResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersResponse) ProtoMessage() {}

func (x *GetMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersResponse.ProtoReflect.Descriptor instead.
func (*GetMembersResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{17}
}

func (x *GetMembersResponse) GetMembers() []*ConversationMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GetMembersResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMembersResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMembersResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMembersResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// LeaveConversationRequest 离开会话请求
type LeaveConversationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LeaveConversationRequest) Reset() {
	*x = LeaveConversationRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveConversationRequest) ProtoMessage() {}

func (x *LeaveConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveConversationRequest.ProtoReflect.Descriptor instead.
func (*LeaveConversationRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{18}
}

func (x *LeaveConversationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LeaveConversationRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

// LeaveConversationResponse 离开会话响应
type LeaveConversationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作是否成功
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveConversationResponse) Reset() {
	*x = LeaveConversationResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveConversationResponse) ProtoMessage() {}

func (x *LeaveConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveConversationResponse.ProtoReflect.Descriptor instead.
func (*LeaveConversationResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{19}
}

func (x *LeaveConversationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// GetMessagesRequest 获取历史消息请求
type GetMessagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 起始序列号（可选，用于分页）
	StartSeqId int64 `protobuf:"varint,3,opt,name=start_seq_id,json=startSeqId,proto3" json:"start_seq_id,omitempty"`
	// 结束序列号（可选，用于分页）
	EndSeqId int64 `protobuf:"varint,4,opt,name=end_seq_id,json=endSeqId,proto3" json:"end_seq_id,omitempty"`
	// 限制数量
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// 排序方向（true: 升序, false: 降序）
	Ascending bool `protobuf:"varint,6,opt,name=ascending,proto3" json:"ascending,omitempty"`
	// 消息类型过滤（可选）
	TypeFilter    []MessageType `protobuf:"varint,7,rep,packed,name=type_filter,json=typeFilter,proto3,enum=im.logic.v1.MessageType" json:"type_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMessagesRequest) Reset() {
	*x = GetMessagesRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesRequest) ProtoMessage() {}

func (x *GetMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetMessagesRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{20}
}

func (x *GetMessagesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetMessagesRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetMessagesRequest) GetStartSeqId() int64 {
	if x != nil {
		return x.StartSeqId
	}
	return 0
}

func (x *GetMessagesRequest) GetEndSeqId() int64 {
	if x != nil {
		return x.EndSeqId
	}
	return 0
}

func (x *GetMessagesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMessagesRequest) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetMessagesRequest) GetTypeFilter() []MessageType {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

// GetMessagesResponse 获取历史消息响应
type GetMessagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 消息列表
	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// 是否还有更多消息
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 下一页的起始序列号
	NextSeqId int64 `protobuf:"varint,3,opt,name=next_seq_id,json=nextSeqId,proto3" json:"next_seq_id,omitempty"`
	// 上一页的起始序列号
	PrevSeqId     int64 `protobuf:"varint,4,opt,name=prev_seq_id,json=prevSeqId,proto3" json:"prev_seq_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMessagesResponse) Reset() {
	*x = GetMessagesResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesResponse) ProtoMessage() {}

func (x *GetMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetMessagesResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{21}
}

func (x *GetMessagesResponse) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetMessagesResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetMessagesResponse) GetNextSeqId() int64 {
	if x != nil {
		return x.NextSeqId
	}
	return 0
}

func (x *GetMessagesResponse) GetPrevSeqId() int64 {
	if x != nil {
		return x.PrevSeqId
	}
	return 0
}

// MarkAsReadRequest 标记已读请求
type MarkAsReadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 已读到的序列号
	SeqId         int64 `protobuf:"varint,3,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkAsReadRequest) Reset() {
	*x = MarkAsReadRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAsReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsReadRequest) ProtoMessage() {}

func (x *MarkAsReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsReadRequest.ProtoReflect.Descriptor instead.
func (*MarkAsReadRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{22}
}

func (x *MarkAsReadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MarkAsReadRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MarkAsReadRequest) GetSeqId() int64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

// MarkAsReadResponse 标记已读响应
type MarkAsReadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 更新后的未读数量
	UnreadCount   int64 `protobuf:"varint,2,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkAsReadResponse) Reset() {
	*x = MarkAsReadResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAsReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsReadResponse) ProtoMessage() {}

func (x *MarkAsReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsReadResponse.ProtoReflect.Descriptor instead.
func (*MarkAsReadResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{23}
}

func (x *MarkAsReadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MarkAsReadResponse) GetUnreadCount() int64 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

// GetUnreadCountRequest 获取未读数请求
type GetUnreadCountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话 ID（可选，不指定则返回所有会话的未读数）
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetUnreadCountRequest) Reset() {
	*x = GetUnreadCountRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnreadCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnreadCountRequest) ProtoMessage() {}

func (x *GetUnreadCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnreadCountRequest.ProtoReflect.Descriptor instead.
func (*GetUnreadCountRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{24}
}

func (x *GetUnreadCountRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUnreadCountRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

// GetUnreadCountResponse 获取未读数响应
type GetUnreadCountResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 未读消息数量
	UnreadCount int64 `protobuf:"varint,1,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	// 各会话的未读数（当不指定会话 ID 时返回）
	ConversationCounts []*ConversationUnreadCount `protobuf:"bytes,2,rep,name=conversation_counts,json=conversationCounts,proto3" json:"conversation_counts,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetUnreadCountResponse) Reset() {
	*x = GetUnreadCountResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnreadCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnreadCountResponse) ProtoMessage() {}

func (x *GetUnreadCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnreadCountResponse.ProtoReflect.Descriptor instead.
func (*GetUnreadCountResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{25}
}

func (x *GetUnreadCountResponse) GetUnreadCount() int64 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *GetUnreadCountResponse) GetConversationCounts() []*ConversationUnreadCount {
	if x != nil {
		return x.ConversationCounts
	}
	return nil
}

// JoinWorldChatRequest 加入世界聊天室请求
type JoinWorldChatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinWorldChatRequest) Reset() {
	*x = JoinWorldChatRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinWorldChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinWorldChatRequest) ProtoMessage() {}

func (x *JoinWorldChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinWorldChatRequest.ProtoReflect.Descriptor instead.
func (*JoinWorldChatRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{26}
}

func (x *JoinWorldChatRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// JoinWorldChatResponse 加入世界聊天室响应
type JoinWorldChatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 操作是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 世界聊天室会话信息
	Conversation  *Conversation `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinWorldChatResponse) Reset() {
	*x = JoinWorldChatResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinWorldChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinWorldChatResponse) ProtoMessage() {}

func (x *JoinWorldChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinWorldChatResponse.ProtoReflect.Descriptor instead.
func (*JoinWorldChatResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{27}
}

func (x *JoinWorldChatResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinWorldChatResponse) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// SearchConversationsRequest 搜索会话请求
type SearchConversationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 搜索关键词
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// 会话类型过滤（可选）
	TypeFilter ConversationType `protobuf:"varint,3,opt,name=type_filter,json=typeFilter,proto3,enum=im.logic.v1.ConversationType" json:"type_filter,omitempty"`
	// 限制数量
	Limit         int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchConversationsRequest) Reset() {
	*x = SearchConversationsRequest{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConversationsRequest) ProtoMessage() {}

func (x *SearchConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConversationsRequest.ProtoReflect.Descriptor instead.
func (*SearchConversationsRequest) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{28}
}

func (x *SearchConversationsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SearchConversationsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchConversationsRequest) GetTypeFilter() ConversationType {
	if x != nil {
		return x.TypeFilter
	}
	return ConversationType_CONVERSATION_TYPE_UNSPECIFIED
}

func (x *SearchConversationsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// SearchConversationsResponse 搜索会话响应
type SearchConversationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 搜索结果
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchConversationsResponse) Reset() {
	*x = SearchConversationsResponse{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchConversationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConversationsResponse) ProtoMessage() {}

func (x *SearchConversationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConversationsResponse.ProtoReflect.Descriptor instead.
func (*SearchConversationsResponse) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{29}
}

func (x *SearchConversationsResponse) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

// 统一的会话信息
type Conversation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话 ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 会话类型
	Type ConversationType `protobuf:"varint,2,opt,name=type,proto3,enum=im.logic.v1.ConversationType" json:"type,omitempty"`
	// 会话名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 会话头像 URL
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// 会话描述
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// 会话所有者 ID（群主、频道主，单聊为空）
	OwnerId string `protobuf:"bytes,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// 成员数量
	MemberCount int32 `protobuf:"varint,7,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	// 会话配置
	Settings *ConversationSettings `protobuf:"bytes,8,opt,name=settings,proto3" json:"settings,omitempty"`
	// 最后一条消息
	LastMessage *Message `protobuf:"bytes,9,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	// 未读消息数量
	UnreadCount int64 `protobuf:"varint,10,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	// 最后更新时间（Unix 时间戳）
	UpdatedAt int64 `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// 创建时间（Unix 时间戳）
	CreatedAt int64 `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 当前用户在此会话中的成员信息
	MyMembership  *ConversationMember `protobuf:"bytes,13,opt,name=my_membership,json=myMembership,proto3" json:"my_membership,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{30}
}

func (x *Conversation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Conversation) GetType() ConversationType {
	if x != nil {
		return x.Type
	}
	return ConversationType_CONVERSATION_TYPE_UNSPECIFIED
}

func (x *Conversation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Conversation) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Conversation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Conversation) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Conversation) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Conversation) GetSettings() *ConversationSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Conversation) GetLastMessage() *Message {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

func (x *Conversation) GetUnreadCount() int64 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *Conversation) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Conversation) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Conversation) GetMyMembership() *ConversationMember {
	if x != nil {
		return x.MyMembership
	}
	return nil
}

// 会话配置（用于存储类型特有的配置）
type ConversationSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 群聊配置
	GroupSettings *GroupSettings `protobuf:"bytes,1,opt,name=group_settings,json=groupSettings,proto3" json:"group_settings,omitempty"`
	// 世界聊天室配置
	WorldSettings *WorldChatSettings `protobuf:"bytes,2,opt,name=world_settings,json=worldSettings,proto3" json:"world_settings,omitempty"`
	// 单聊配置
	SingleSettings *SingleChatSettings `protobuf:"bytes,3,opt,name=single_settings,json=singleSettings,proto3" json:"single_settings,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConversationSettings) Reset() {
	*x = ConversationSettings{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSettings) ProtoMessage() {}

func (x *ConversationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSettings.ProtoReflect.Descriptor instead.
func (*ConversationSettings) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{31}
}

func (x *ConversationSettings) GetGroupSettings() *GroupSettings {
	if x != nil {
		return x.GroupSettings
	}
	return nil
}

func (x *ConversationSettings) GetWorldSettings() *WorldChatSettings {
	if x != nil {
		return x.WorldSettings
	}
	return nil
}

func (x *ConversationSettings) GetSingleSettings() *SingleChatSettings {
	if x != nil {
		return x.SingleSettings
	}
	return nil
}

// 群聊配置
type GroupSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 是否需要审批加入
	JoinApprovalRequired bool `protobuf:"varint,1,opt,name=join_approval_required,json=joinApprovalRequired,proto3" json:"join_approval_required,omitempty"`
	// 是否允许普通成员邀请
	InviteEnabled bool `protobuf:"varint,2,opt,name=invite_enabled,json=inviteEnabled,proto3" json:"invite_enabled,omitempty"`
	// 最大成员数
	MaxMembers int32 `protobuf:"varint,3,opt,name=max_members,json=maxMembers,proto3" json:"max_members,omitempty"`
	// 是否全员禁言
	MuteAll bool `protobuf:"varint,4,opt,name=mute_all,json=muteAll,proto3" json:"mute_all,omitempty"`
	// 是否允许成员查看历史消息
	AllowMemberViewHistory bool `protobuf:"varint,5,opt,name=allow_member_view_history,json=allowMemberViewHistory,proto3" json:"allow_member_view_history,omitempty"`
	// 群公告
	Announcement  string `protobuf:"bytes,6,opt,name=announcement,proto3" json:"announcement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupSettings) Reset() {
	*x = GroupSettings{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSettings) ProtoMessage() {}

func (x *GroupSettings) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSettings.ProtoReflect.Descriptor instead.
func (*GroupSettings) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{32}
}

func (x *GroupSettings) GetJoinApprovalRequired() bool {
	if x != nil {
		return x.JoinApprovalRequired
	}
	return false
}

func (x *GroupSettings) GetInviteEnabled() bool {
	if x != nil {
		return x.InviteEnabled
	}
	return false
}

func (x *GroupSettings) GetMaxMembers() int32 {
	if x != nil {
		return x.MaxMembers
	}
	return 0
}

func (x *GroupSettings) GetMuteAll() bool {
	if x != nil {
		return x.MuteAll
	}
	return false
}

func (x *GroupSettings) GetAllowMemberViewHistory() bool {
	if x != nil {
		return x.AllowMemberViewHistory
	}
	return false
}

func (x *GroupSettings) GetAnnouncement() string {
	if x != nil {
		return x.Announcement
	}
	return ""
}

// 世界聊天室配置
type WorldChatSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 是否允许游客
	GuestAllowed bool `protobuf:"varint,1,opt,name=guest_allowed,json=guestAllowed,proto3" json:"guest_allowed,omitempty"`
	// 消息频率限制（条/分钟）
	MessageRateLimit int32 `protobuf:"varint,2,opt,name=message_rate_limit,json=messageRateLimit,proto3" json:"message_rate_limit,omitempty"`
	// 游客是否自动加入
	AutoJoinGuests bool `protobuf:"varint,3,opt,name=auto_join_guests,json=autoJoinGuests,proto3" json:"auto_join_guests,omitempty"`
	// 是否启用内容过滤
	ContentFilterEnabled bool `protobuf:"varint,4,opt,name=content_filter_enabled,json=contentFilterEnabled,proto3" json:"content_filter_enabled,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *WorldChatSettings) Reset() {
	*x = WorldChatSettings{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldChatSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldChatSettings) ProtoMessage() {}

func (x *WorldChatSettings) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldChatSettings.ProtoReflect.Descriptor instead.
func (*WorldChatSettings) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{33}
}

func (x *WorldChatSettings) GetGuestAllowed() bool {
	if x != nil {
		return x.GuestAllowed
	}
	return false
}

func (x *WorldChatSettings) GetMessageRateLimit() int32 {
	if x != nil {
		return x.MessageRateLimit
	}
	return 0
}

func (x *WorldChatSettings) GetAutoJoinGuests() bool {
	if x != nil {
		return x.AutoJoinGuests
	}
	return false
}

func (x *WorldChatSettings) GetContentFilterEnabled() bool {
	if x != nil {
		return x.ContentFilterEnabled
	}
	return false
}

// 单聊配置
type SingleChatSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 是否允许消息撤回
	AllowRecall bool `protobuf:"varint,1,opt,name=allow_recall,json=allowRecall,proto3" json:"allow_recall,omitempty"`
	// 消息撤回时限（秒）
	RecallTimeLimit int32 `protobuf:"varint,2,opt,name=recall_time_limit,json=recallTimeLimit,proto3" json:"recall_time_limit,omitempty"`
	// 是否显示已读状态
	ShowReadStatus bool `protobuf:"varint,3,opt,name=show_read_status,json=showReadStatus,proto3" json:"show_read_status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SingleChatSettings) Reset() {
	*x = SingleChatSettings{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleChatSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleChatSettings) ProtoMessage() {}

func (x *SingleChatSettings) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleChatSettings.ProtoReflect.Descriptor instead.
func (*SingleChatSettings) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{34}
}

func (x *SingleChatSettings) GetAllowRecall() bool {
	if x != nil {
		return x.AllowRecall
	}
	return false
}

func (x *SingleChatSettings) GetRecallTimeLimit() int32 {
	if x != nil {
		return x.RecallTimeLimit
	}
	return 0
}

func (x *SingleChatSettings) GetShowReadStatus() bool {
	if x != nil {
		return x.ShowReadStatus
	}
	return false
}

// 会话成员信息
type ConversationMember struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 成员角色
	Role ConversationMemberRole `protobuf:"varint,3,opt,name=role,proto3,enum=im.logic.v1.ConversationMemberRole" json:"role,omitempty"`
	// 是否被禁言
	Muted bool `protobuf:"varint,4,opt,name=muted,proto3" json:"muted,omitempty"`
	// 禁言到期时间（Unix 时间戳，0表示未被禁言）
	MutedUntil int64 `protobuf:"varint,5,opt,name=muted_until,json=mutedUntil,proto3" json:"muted_until,omitempty"`
	// 加入时间（Unix 时间戳）
	JoinedAt int64 `protobuf:"varint,6,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	// 更新时间（Unix 时间戳）
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// 用户信息
	User          *User `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversationMember) Reset() {
	*x = ConversationMember{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMember) ProtoMessage() {}

func (x *ConversationMember) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMember.ProtoReflect.Descriptor instead.
func (*ConversationMember) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{35}
}

func (x *ConversationMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConversationMember) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationMember) GetRole() ConversationMemberRole {
	if x != nil {
		return x.Role
	}
	return ConversationMemberRole_CONVERSATION_MEMBER_ROLE_UNSPECIFIED
}

func (x *ConversationMember) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *ConversationMember) GetMutedUntil() int64 {
	if x != nil {
		return x.MutedUntil
	}
	return 0
}

func (x *ConversationMember) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *ConversationMember) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ConversationMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// 会话未读数
type ConversationUnreadCount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话 ID
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 未读数量
	UnreadCount   int64 `protobuf:"varint,2,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversationUnreadCount) Reset() {
	*x = ConversationUnreadCount{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationUnreadCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationUnreadCount) ProtoMessage() {}

func (x *ConversationUnreadCount) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationUnreadCount.ProtoReflect.Descriptor instead.
func (*ConversationUnreadCount) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{36}
}

func (x *ConversationUnreadCount) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationUnreadCount) GetUnreadCount() int64 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

// 失败的用户操作
type FailedUser struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户 ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 失败原因
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// 错误码
	ErrorCode     ErrorCode `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=im.logic.v1.ErrorCode" json:"error_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FailedUser) Reset() {
	*x = FailedUser{}
	mi := &file_im_logic_v1_conversation_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedUser) ProtoMessage() {}

func (x *FailedUser) ProtoReflect() protoreflect.Message {
	mi := &file_im_logic_v1_conversation_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedUser.ProtoReflect.Descriptor instead.
func (*FailedUser) Descriptor() ([]byte, []int) {
	return file_im_logic_v1_conversation_proto_rawDescGZIP(), []int{37}
}

func (x *FailedUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FailedUser) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FailedUser) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

var File_im_logic_v1_conversation_proto protoreflect.FileDescriptor

const file_im_logic_v1_conversation_proto_rawDesc = "" +
	"\n" +
	"\x1eim_logic/v1/conversation.proto\x12\vim.logic.v1\x1a\x18im_logic/v1/common.proto\"\xa0\x02\n" +
	"\x19CreateConversationRequest\x12\x1d\n" +
	"\n" +
	"creator_id\x18\x01 \x01(\tR\tcreatorId\x121\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1d.im.logic.v1.ConversationTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\x04 \x01(\tR\tavatarUrl\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"member_ids\x18\x06 \x03(\tR\tmemberIds\x12=\n" +
	"\bsettings\x18\a \x01(\v2!.im.logic.v1.ConversationSettingsR\bsettings\"[\n" +
	"\x1aCreateConversationResponse\x12=\n" +
	"\fconversation\x18\x01 \x01(\v2\x19.im.logic.v1.ConversationR\fconversation\"\x83\x01\n" +
	"\x16GetConversationRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12'\n" +
	"\x0finclude_members\x18\x03 \x01(\bR\x0eincludeMembers\"\x93\x01\n" +
	"\x17GetConversationResponse\x12=\n" +
	"\fconversation\x18\x01 \x01(\v2\x19.im.logic.v1.ConversationR\fconversation\x129\n" +
	"\amembers\x18\x02 \x03(\v2\x1f.im.logic.v1.ConversationMemberR\amembers\"\xbe\x01\n" +
	"\x17GetConversationsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12>\n" +
	"\vtype_filter\x18\x04 \x01(\x0e2\x1d.im.logic.v1.ConversationTypeR\n" +
	"typeFilter\x12\x19\n" +
	"\border_by\x18\x05 \x01(\tR\aorderBy\"\xbd\x01\n" +
	"\x18GetConversationsResponse\x12?\n" +
	"\rconversations\x18\x01 \x03(\v2\x19.im.logic.v1.ConversationR\rconversations\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x19\n" +
	"\bhas_more\x18\x05 \x01(\bR\ahasMore\"\x92\x02\n" +
	"\x19UpdateConversationRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\x04 \x01(\tR\tavatarUrl\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12=\n" +
	"\bsettings\x18\x06 \x01(\v2!.im.logic.v1.ConversationSettingsR\bsettings\x12\x1f\n" +
	"\vupdate_mask\x18\a \x03(\tR\n" +
	"updateMask\"[\n" +
	"\x1aUpdateConversationResponse\x12=\n" +
	"\fconversation\x18\x01 \x01(\v2\x19.im.logic.v1.ConversationR\fconversation\"u\n" +
	"\x19DeleteConversationRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"6\n" +
	"\x1aDeleteConversationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\xb1\x01\n" +
	"\x11AddMembersRequest\x12\x1f\n" +
	"\voperator_id\x18\x01 \x01(\tR\n" +
	"operatorId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x19\n" +
	"\buser_ids\x18\x03 \x03(\tR\auserIds\x127\n" +
	"\x04role\x18\x04 \x01(\x0e2#.im.logic.v1.ConversationMemberRoleR\x04role\"\x90\x01\n" +
	"\x12AddMembersResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12$\n" +
	"\x0eadded_user_ids\x18\x02 \x03(\tR\faddedUserIds\x12:\n" +
	"\ffailed_users\x18\x03 \x03(\v2\x17.im.logic.v1.FailedUserR\vfailedUsers\"\x93\x01\n" +
	"\x14RemoveMembersRequest\x12\x1f\n" +
	"\voperator_id\x18\x01 \x01(\tR\n" +
	"operatorId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x19\n" +
	"\buser_ids\x18\x03 \x03(\tR\auserIds\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\"\x97\x01\n" +
	"\x15RemoveMembersResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12(\n" +
	"\x10removed_user_ids\x18\x02 \x03(\tR\x0eremovedUserIds\x12:\n" +
	"\ffailed_users\x18\x03 \x03(\v2\x17.im.logic.v1.FailedUserR\vfailedUsers\"\xc9\x01\n" +
	"\x17UpdateMemberRoleRequest\x12\x1f\n" +
	"\voperator_id\x18\x01 \x01(\tR\n" +
	"operatorId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12$\n" +
	"\x0etarget_user_id\x18\x03 \x01(\tR\ftargetUserId\x12>\n" +
	"\bnew_role\x18\x04 \x01(\x0e2#.im.logic.v1.ConversationMemberRoleR\anewRole\"4\n" +
	"\x18UpdateMemberRoleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\xcc\x01\n" +
	"\x11GetMembersRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12D\n" +
	"\vrole_filter\x18\x05 \x01(\x0e2#.im.logic.v1.ConversationMemberRoleR\n" +
	"roleFilter\"\xb1\x01\n" +
	"\x12GetMembersResponse\x129\n" +
	"\amembers\x18\x01 \x03(\v2\x1f.im.logic.v1.ConversationMemberR\amembers\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x19\n" +
	"\bhas_more\x18\x05 \x01(\bR\ahasMore\"\\\n" +
	"\x18LeaveConversationRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\"5\n" +
	"\x19LeaveConversationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\x85\x02\n" +
	"\x12GetMessagesRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12 \n" +
	"\fstart_seq_id\x18\x03 \x01(\x03R\n" +
	"startSeqId\x12\x1c\n" +
	"\n" +
	"end_seq_id\x18\x04 \x01(\x03R\bendSeqId\x12\x14\n" +
	"\x05limit\x18\x05 \x01(\x05R\x05limit\x12\x1c\n" +
	"\tascending\x18\x06 \x01(\bR\tascending\x129\n" +
	"\vtype_filter\x18\a \x03(\x0e2\x18.im.logic.v1.MessageTypeR\n" +
	"typeFilter\"\xa2\x01\n" +
	"\x13GetMessagesResponse\x120\n" +
	"\bmessages\x18\x01 \x03(\v2\x14.im.logic.v1.MessageR\bmessages\x12\x19\n" +
	"\bhas_more\x18\x02 \x01(\bR\ahasMore\x12\x1e\n" +
	"\vnext_seq_id\x18\x03 \x01(\x03R\tnextSeqId\x12\x1e\n" +
	"\vprev_seq_id\x18\x04 \x01(\x03R\tprevSeqId\"l\n" +
	"\x11MarkAsReadRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x15\n" +
	"\x06seq_id\x18\x03 \x01(\x03R\x05seqId\"Q\n" +
	"\x12MarkAsReadResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12!\n" +
	"\funread_count\x18\x02 \x01(\x03R\vunreadCount\"Y\n" +
	"\x15GetUnreadCountRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\"\x92\x01\n" +
	"\x16GetUnreadCountResponse\x12!\n" +
	"\funread_count\x18\x01 \x01(\x03R\vunreadCount\x12U\n" +
	"\x13conversation_counts\x18\x02 \x03(\v2$.im.logic.v1.ConversationUnreadCountR\x12conversationCounts\"/\n" +
	"\x14JoinWorldChatRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"p\n" +
	"\x15JoinWorldChatResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12=\n" +
	"\fconversation\x18\x02 \x01(\v2\x19.im.logic.v1.ConversationR\fconversation\"\xa1\x01\n" +
	"\x1aSearchConversationsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12>\n" +
	"\vtype_filter\x18\x03 \x01(\x0e2\x1d.im.logic.v1.ConversationTypeR\n" +
	"typeFilter\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\"^\n" +
	"\x1bSearchConversationsResponse\x12?\n" +
	"\rconversations\x18\x01 \x03(\v2\x19.im.logic.v1.ConversationR\rconversations\"\x83\x04\n" +
	"\fConversation\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x121\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1d.im.logic.v1.ConversationTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\x04 \x01(\tR\tavatarUrl\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x19\n" +
	"\bowner_id\x18\x06 \x01(\tR\aownerId\x12!\n" +
	"\fmember_count\x18\a \x01(\x05R\vmemberCount\x12=\n" +
	"\bsettings\x18\b \x01(\v2!.im.logic.v1.ConversationSettingsR\bsettings\x127\n" +
	"\flast_message\x18\t \x01(\v2\x14.im.logic.v1.MessageR\vlastMessage\x12!\n" +
	"\funread_count\x18\n" +
	" \x01(\x03R\vunreadCount\x12\x1d\n" +
	"\n" +
	"updated_at\x18\v \x01(\x03R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"created_at\x18\f \x01(\x03R\tcreatedAt\x12D\n" +
	"\rmy_membership\x18\r \x01(\v2\x1f.im.logic.v1.ConversationMemberR\fmyMembership\"\xea\x01\n" +
	"\x14ConversationSettings\x12A\n" +
	"\x0egroup_settings\x18\x01 \x01(\v2\x1a.im.logic.v1.GroupSettingsR\rgroupSettings\x12E\n" +
	"\x0eworld_settings\x18\x02 \x01(\v2\x1e.im.logic.v1.WorldChatSettingsR\rworldSettings\x12H\n" +
	"\x0fsingle_settings\x18\x03 \x01(\v2\x1f.im.logic.v1.SingleChatSettingsR\x0esingleSettings\"\x87\x02\n" +
	"\rGroupSettings\x124\n" +
	"\x16join_approval_required\x18\x01 \x01(\bR\x14joinApprovalRequired\x12%\n" +
	"\x0einvite_enabled\x18\x02 \x01(\bR\rinviteEnabled\x12\x1f\n" +
	"\vmax_members\x18\x03 \x01(\x05R\n" +
	"maxMembers\x12\x19\n" +
	"\bmute_all\x18\x04 \x01(\bR\amuteAll\x129\n" +
	"\x19allow_member_view_history\x18\x05 \x01(\bR\x16allowMemberViewHistory\x12\"\n" +
	"\fannouncement\x18\x06 \x01(\tR\fannouncement\"\xc6\x01\n" +
	"\x11WorldChatSettings\x12#\n" +
	"\rguest_allowed\x18\x01 \x01(\bR\fguestAllowed\x12,\n" +
	"\x12message_rate_limit\x18\x02 \x01(\x05R\x10messageRateLimit\x12(\n" +
	"\x10auto_join_guests\x18\x03 \x01(\bR\x0eautoJoinGuests\x124\n" +
	"\x16content_filter_enabled\x18\x04 \x01(\bR\x14contentFilterEnabled\"\x8d\x01\n" +
	"\x12SingleChatSettings\x12!\n" +
	"\fallow_recall\x18\x01 \x01(\bR\vallowRecall\x12*\n" +
	"\x11recall_time_limit\x18\x02 \x01(\x05R\x0frecallTimeLimit\x12(\n" +
	"\x10show_read_status\x18\x03 \x01(\bR\x0eshowReadStatus\"\xa9\x02\n" +
	"\x12ConversationMember\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x127\n" +
	"\x04role\x18\x03 \x01(\x0e2#.im.logic.v1.ConversationMemberRoleR\x04role\x12\x14\n" +
	"\x05muted\x18\x04 \x01(\bR\x05muted\x12\x1f\n" +
	"\vmuted_until\x18\x05 \x01(\x03R\n" +
	"mutedUntil\x12\x1b\n" +
	"\tjoined_at\x18\x06 \x01(\x03R\bjoinedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\a \x01(\x03R\tupdatedAt\x12%\n" +
	"\x04user\x18\b \x01(\v2\x11.im.logic.v1.UserR\x04user\"e\n" +
	"\x17ConversationUnreadCount\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\tR\x0econversationId\x12!\n" +
	"\funread_count\x18\x02 \x01(\x03R\vunreadCount\"t\n" +
	"\n" +
	"FailedUser\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x125\n" +
	"\n" +
	"error_code\x18\x03 \x01(\x0e2\x16.im.logic.v1.ErrorCodeR\terrorCode*\xaf\x01\n" +
	"\x16ConversationMemberRole\x12(\n" +
	"$CONVERSATION_MEMBER_ROLE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fCONVERSATION_MEMBER_ROLE_MEMBER\x10\x01\x12\"\n" +
	"\x1eCONVERSATION_MEMBER_ROLE_ADMIN\x10\x02\x12\"\n" +
	"\x1eCONVERSATION_MEMBER_ROLE_OWNER\x10\x032\x82\v\n" +
	"\x13ConversationService\x12e\n" +
	"\x12CreateConversation\x12&.im.logic.v1.CreateConversationRequest\x1a'.im.logic.v1.CreateConversationResponse\x12\\\n" +
	"\x0fGetConversation\x12#.im.logic.v1.GetConversationRequest\x1a$.im.logic.v1.GetConversationResponse\x12_\n" +
	"\x10GetConversations\x12$.im.logic.v1.GetConversationsRequest\x1a%.im.logic.v1.GetConversationsResponse\x12e\n" +
	"\x12UpdateConversation\x12&.im.logic.v1.UpdateConversationRequest\x1a'.im.logic.v1.UpdateConversationResponse\x12e\n" +
	"\x12DeleteConversation\x12&.im.logic.v1.DeleteConversationRequest\x1a'.im.logic.v1.DeleteConversationResponse\x12M\n" +
	"\n" +
	"AddMembers\x12\x1e.im.logic.v1.AddMembersRequest\x1a\x1f.im.logic.v1.AddMembersResponse\x12V\n" +
	"\rRemoveMembers\x12!.im.logic.v1.RemoveMembersRequest\x1a\".im.logic.v1.RemoveMembersResponse\x12_\n" +
	"\x10UpdateMemberRole\x12$.im.logic.v1.UpdateMemberRoleRequest\x1a%.im.logic.v1.UpdateMemberRoleResponse\x12M\n" +
	"\n" +
	"GetMembers\x12\x1e.im.logic.v1.GetMembersRequest\x1a\x1f.im.logic.v1.GetMembersResponse\x12b\n" +
	"\x11LeaveConversation\x12%.im.logic.v1.LeaveConversationRequest\x1a&.im.logic.v1.LeaveConversationResponse\x12P\n" +
	"\vGetMessages\x12\x1f.im.logic.v1.GetMessagesRequest\x1a .im.logic.v1.GetMessagesResponse\x12M\n" +
	"\n" +
	"MarkAsRead\x12\x1e.im.logic.v1.MarkAsReadRequest\x1a\x1f.im.logic.v1.MarkAsReadResponse\x12Y\n" +
	"\x0eGetUnreadCount\x12\".im.logic.v1.GetUnreadCountRequest\x1a#.im.logic.v1.GetUnreadCountResponse\x12V\n" +
	"\rJoinWorldChat\x12!.im.logic.v1.JoinWorldChatRequest\x1a\".im.logic.v1.JoinWorldChatResponse\x12h\n" +
	"\x13SearchConversations\x12'.im.logic.v1.SearchConversationsRequest\x1a(.im.logic.v1.SearchConversationsResponseB9Z7github.com/ceyewan/gochat/api/proto/im_logic/v1;logicv1b\x06proto3"

var (
	file_im_logic_v1_conversation_proto_rawDescOnce sync.Once
	file_im_logic_v1_conversation_proto_rawDescData []byte
)

func file_im_logic_v1_conversation_proto_rawDescGZIP() []byte {
	file_im_logic_v1_conversation_proto_rawDescOnce.Do(func() {
		file_im_logic_v1_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_im_logic_v1_conversation_proto_rawDesc), len(file_im_logic_v1_conversation_proto_rawDesc)))
	})
	return file_im_logic_v1_conversation_proto_rawDescData
}

var file_im_logic_v1_conversation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_im_logic_v1_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_im_logic_v1_conversation_proto_goTypes = []any{
	(ConversationMemberRole)(0),         // 0: im.logic.v1.ConversationMemberRole
	(*CreateConversationRequest)(nil),   // 1: im.logic.v1.CreateConversationRequest
	(*CreateConversationResponse)(nil),  // 2: im.logic.v1.CreateConversationResponse
	(*GetConversationRequest)(nil),      // 3: im.logic.v1.GetConversationRequest
	(*GetConversationResponse)(nil),     // 4: im.logic.v1.GetConversationResponse
	(*GetConversationsRequest)(nil),     // 5: im.logic.v1.GetConversationsRequest
	(*GetConversationsResponse)(nil),    // 6: im.logic.v1.GetConversationsResponse
	(*UpdateConversationRequest)(nil),   // 7: im.logic.v1.UpdateConversationRequest
	(*UpdateConversationResponse)(nil),  // 8: im.logic.v1.UpdateConversationResponse
	(*DeleteConversationRequest)(nil),   // 9: im.logic.v1.DeleteConversationRequest
	(*DeleteConversationResponse)(nil),  // 10: im.logic.v1.DeleteConversationResponse
	(*AddMembersRequest)(nil),           // 11: im.logic.v1.AddMembersRequest
	(*AddMembersResponse)(nil),          // 12: im.logic.v1.AddMembersResponse
	(*RemoveMembersRequest)(nil),        // 13: im.logic.v1.RemoveMembersRequest
	(*RemoveMembersResponse)(nil),       // 14: im.logic.v1.RemoveMembersResponse
	(*UpdateMemberRoleRequest)(nil),     // 15: im.logic.v1.UpdateMemberRoleRequest
	(*UpdateMemberRoleResponse)(nil),    // 16: im.logic.v1.UpdateMemberRoleResponse
	(*GetMembersRequest)(nil),           // 17: im.logic.v1.GetMembersRequest
	(*GetMembersResponse)(nil),          // 18: im.logic.v1.GetMembersResponse
	(*LeaveConversationRequest)(nil),    // 19: im.logic.v1.LeaveConversationRequest
	(*LeaveConversationResponse)(nil),   // 20: im.logic.v1.LeaveConversationResponse
	(*GetMessagesRequest)(nil),          // 21: im.logic.v1.GetMessagesRequest
	(*GetMessagesResponse)(nil),         // 22: im.logic.v1.GetMessagesResponse
	(*MarkAsReadRequest)(nil),           // 23: im.logic.v1.MarkAsReadRequest
	(*MarkAsReadResponse)(nil),          // 24: im.logic.v1.MarkAsReadResponse
	(*GetUnreadCountRequest)(nil),       // 25: im.logic.v1.GetUnreadCountRequest
	(*GetUnreadCountResponse)(nil),      // 26: im.logic.v1.GetUnreadCountResponse
	(*JoinWorldChatRequest)(nil),        // 27: im.logic.v1.JoinWorldChatRequest
	(*JoinWorldChatResponse)(nil),       // 28: im.logic.v1.JoinWorldChatResponse
	(*SearchConversationsRequest)(nil),  // 29: im.logic.v1.SearchConversationsRequest
	(*SearchConversationsResponse)(nil), // 30: im.logic.v1.SearchConversationsResponse
	(*Conversation)(nil),                // 31: im.logic.v1.Conversation
	(*ConversationSettings)(nil),        // 32: im.logic.v1.ConversationSettings
	(*GroupSettings)(nil),               // 33: im.logic.v1.GroupSettings
	(*WorldChatSettings)(nil),           // 34: im.logic.v1.WorldChatSettings
	(*SingleChatSettings)(nil),          // 35: im.logic.v1.SingleChatSettings
	(*ConversationMember)(nil),          // 36: im.logic.v1.ConversationMember
	(*ConversationUnreadCount)(nil),     // 37: im.logic.v1.ConversationUnreadCount
	(*FailedUser)(nil),                  // 38: im.logic.v1.FailedUser
	(ConversationType)(0),               // 39: im.logic.v1.ConversationType
	(MessageType)(0),                    // 40: im.logic.v1.MessageType
	(*Message)(nil),                     // 41: im.logic.v1.Message
	(*User)(nil),                        // 42: im.logic.v1.User
	(ErrorCode)(0),                      // 43: im.logic.v1.ErrorCode
}
var file_im_logic_v1_conversation_proto_depIdxs = []int32{
	39, // 0: im.logic.v1.CreateConversationRequest.type:type_name -> im.logic.v1.ConversationType
	32, // 1: im.logic.v1.CreateConversationRequest.settings:type_name -> im.logic.v1.ConversationSettings
	31, // 2: im.logic.v1.CreateConversationResponse.conversation:type_name -> im.logic.v1.Conversation
	31, // 3: im.logic.v1.GetConversationResponse.conversation:type_name -> im.logic.v1.Conversation
	36, // 4: im.logic.v1.GetConversationResponse.members:type_name -> im.logic.v1.ConversationMember
	39, // 5: im.logic.v1.GetConversationsRequest.type_filter:type_name -> im.logic.v1.ConversationType
	31, // 6: im.logic.v1.GetConversationsResponse.conversations:type_name -> im.logic.v1.Conversation
	32, // 7: im.logic.v1.UpdateConversationRequest.settings:type_name -> im.logic.v1.ConversationSettings
	31, // 8: im.logic.v1.UpdateConversationResponse.conversation:type_name -> im.logic.v1.Conversation
	0,  // 9: im.logic.v1.AddMembersRequest.role:type_name -> im.logic.v1.ConversationMemberRole
	38, // 10: im.logic.v1.AddMembersResponse.failed_users:type_name -> im.logic.v1.FailedUser
	38, // 11: im.logic.v1.RemoveMembersResponse.failed_users:type_name -> im.logic.v1.FailedUser
	0,  // 12: im.logic.v1.UpdateMemberRoleRequest.new_role:type_name -> im.logic.v1.ConversationMemberRole
	0,  // 13: im.logic.v1.GetMembersRequest.role_filter:type_name -> im.logic.v1.ConversationMemberRole
	36, // 14: im.logic.v1.GetMembersResponse.members:type_name -> im.logic.v1.ConversationMember
	40, // 15: im.logic.v1.GetMessagesRequest.type_filter:type_name -> im.logic.v1.MessageType
	41, // 16: im.logic.v1.GetMessagesResponse.messages:type_name -> im.logic.v1.Message
	37, // 17: im.logic.v1.GetUnreadCountResponse.conversation_counts:type_name -> im.logic.v1.ConversationUnreadCount
	31, // 18: im.logic.v1.JoinWorldChatResponse.conversation:type_name -> im.logic.v1.Conversation
	39, // 19: im.logic.v1.SearchConversationsRequest.type_filter:type_name -> im.logic.v1.ConversationType
	31, // 20: im.logic.v1.SearchConversationsResponse.conversations:type_name -> im.logic.v1.Conversation
	39, // 21: im.logic.v1.Conversation.type:type_name -> im.logic.v1.ConversationType
	32, // 22: im.logic.v1.Conversation.settings:type_name -> im.logic.v1.ConversationSettings
	41, // 23: im.logic.v1.Conversation.last_message:type_name -> im.logic.v1.Message
	36, // 24: im.logic.v1.Conversation.my_membership:type_name -> im.logic.v1.ConversationMember
	33, // 25: im.logic.v1.ConversationSettings.group_settings:type_name -> im.logic.v1.GroupSettings
	34, // 26: im.logic.v1.ConversationSettings.world_settings:type_name -> im.logic.v1.WorldChatSettings
	35, // 27: im.logic.v1.ConversationSettings.single_settings:type_name -> im.logic.v1.SingleChatSettings
	0,  // 28: im.logic.v1.ConversationMember.role:type_name -> im.logic.v1.ConversationMemberRole
	42, // 29: im.logic.v1.ConversationMember.user:type_name -> im.logic.v1.User
	43, // 30: im.logic.v1.FailedUser.error_code:type_name -> im.logic.v1.ErrorCode
	1,  // 31: im.logic.v1.ConversationService.CreateConversation:input_type -> im.logic.v1.CreateConversationRequest
	3,  // 32: im.logic.v1.ConversationService.GetConversation:input_type -> im.logic.v1.GetConversationRequest
	5,  // 33: im.logic.v1.ConversationService.GetConversations:input_type -> im.logic.v1.GetConversationsRequest
	7,  // 34: im.logic.v1.ConversationService.UpdateConversation:input_type -> im.logic.v1.UpdateConversationRequest
	9,  // 35: im.logic.v1.ConversationService.DeleteConversation:input_type -> im.logic.v1.DeleteConversationRequest
	11, // 36: im.logic.v1.ConversationService.AddMembers:input_type -> im.logic.v1.AddMembersRequest
	13, // 37: im.logic.v1.ConversationService.RemoveMembers:input_type -> im.logic.v1.RemoveMembersRequest
	15, // 38: im.logic.v1.ConversationService.UpdateMemberRole:input_type -> im.logic.v1.UpdateMemberRoleRequest
	17, // 39: im.logic.v1.ConversationService.GetMembers:input_type -> im.logic.v1.GetMembersRequest
	19, // 40: im.logic.v1.ConversationService.LeaveConversation:input_type -> im.logic.v1.LeaveConversationRequest
	21, // 41: im.logic.v1.ConversationService.GetMessages:input_type -> im.logic.v1.GetMessagesRequest
	23, // 42: im.logic.v1.ConversationService.MarkAsRead:input_type -> im.logic.v1.MarkAsReadRequest
	25, // 43: im.logic.v1.ConversationService.GetUnreadCount:input_type -> im.logic.v1.GetUnreadCountRequest
	27, // 44: im.logic.v1.ConversationService.JoinWorldChat:input_type -> im.logic.v1.JoinWorldChatRequest
	29, // 45: im.logic.v1.ConversationService.SearchConversations:input_type -> im.logic.v1.SearchConversationsRequest
	2,  // 46: im.logic.v1.ConversationService.CreateConversation:output_type -> im.logic.v1.CreateConversationResponse
	4,  // 47: im.logic.v1.ConversationService.GetConversation:output_type -> im.logic.v1.GetConversationResponse
	6,  // 48: im.logic.v1.ConversationService.GetConversations:output_type -> im.logic.v1.GetConversationsResponse
	8,  // 49: im.logic.v1.ConversationService.UpdateConversation:output_type -> im.logic.v1.UpdateConversationResponse
	10, // 50: im.logic.v1.ConversationService.DeleteConversation:output_type -> im.logic.v1.DeleteConversationResponse
	12, // 51: im.logic.v1.ConversationService.AddMembers:output_type -> im.logic.v1.AddMembersResponse
	14, // 52: im.logic.v1.ConversationService.RemoveMembers:output_type -> im.logic.v1.RemoveMembersResponse
	16, // 53: im.logic.v1.ConversationService.UpdateMemberRole:output_type -> im.logic.v1.UpdateMemberRoleResponse
	18, // 54: im.logic.v1.ConversationService.GetMembers:output_type -> im.logic.v1.GetMembersResponse
	20, // 55: im.logic.v1.ConversationService.LeaveConversation:output_type -> im.logic.v1.LeaveConversationResponse
	22, // 56: im.logic.v1.ConversationService.GetMessages:output_type -> im.logic.v1.GetMessagesResponse
	24, // 57: im.logic.v1.ConversationService.MarkAsRead:output_type -> im.logic.v1.MarkAsReadResponse
	26, // 58: im.logic.v1.ConversationService.GetUnreadCount:output_type -> im.logic.v1.GetUnreadCountResponse
	28, // 59: im.logic.v1.ConversationService.JoinWorldChat:output_type -> im.logic.v1.JoinWorldChatResponse
	30, // 60: im.logic.v1.ConversationService.SearchConversations:output_type -> im.logic.v1.SearchConversationsResponse
	46, // [46:61] is the sub-list for method output_type
	31, // [31:46] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_im_logic_v1_conversation_proto_init() }
func file_im_logic_v1_conversation_proto_init() {
	if File_im_logic_v1_conversation_proto != nil {
		return
	}
	file_im_logic_v1_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_im_logic_v1_conversation_proto_rawDesc), len(file_im_logic_v1_conversation_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_im_logic_v1_conversation_proto_goTypes,
		DependencyIndexes: file_im_logic_v1_conversation_proto_depIdxs,
		EnumInfos:         file_im_logic_v1_conversation_proto_enumTypes,
		MessageInfos:      file_im_logic_v1_conversation_proto_msgTypes,
	}.Build()
	File_im_logic_v1_conversation_proto = out.File
	file_im_logic_v1_conversation_proto_goTypes = nil
	file_im_logic_v1_conversation_proto_depIdxs = nil
}
