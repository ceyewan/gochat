// im_logic/v1/conversation.proto
// 定义 im-logic 服务的统一会话管理相关接口
// 统一处理单聊、群聊、世界聊天室的所有操作

syntax = "proto3";

package im.logic.v1;

import "common/v1/types.proto";

option go_package = "github.com/ceyewan/gochat/api/gen/im_logic/v1;imlogicv1";

// ConversationService 统一会话管理服务
// 提供所有类型会话的创建、管理、消息处理等功能
service ConversationService {
  // 会话基本操作
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse);
  rpc GetConversation(GetConversationRequest) returns (GetConversationResponse);
  rpc GetConversations(GetConversationsRequest) returns (GetConversationsResponse);
  rpc GetConversationsOptimized(GetConversationsOptimizedRequest) returns (GetConversationsOptimizedResponse);
  rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse);
  rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse);

  // 成员管理
  rpc AddMembers(AddMembersRequest) returns (AddMembersResponse);
  rpc RemoveMembers(RemoveMembersRequest) returns (RemoveMembersResponse);
  rpc UpdateMemberRole(UpdateMemberRoleRequest) returns (UpdateMemberRoleResponse);
  rpc GetMembers(GetMembersRequest) returns (GetMembersResponse);
  rpc LeaveConversation(LeaveConversationRequest) returns (LeaveConversationResponse);

  // 消息相关
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
  rpc MarkAsRead(MarkAsReadRequest) returns (MarkAsReadResponse);
  rpc GetUnreadCount(GetUnreadCountRequest) returns (GetUnreadCountResponse);

  // 特殊操作
  rpc JoinWorldChat(JoinWorldChatRequest) returns (JoinWorldChatResponse);
  rpc SearchConversations(SearchConversationsRequest) returns (SearchConversationsResponse);
}

// CreateConversationRequest 创建会话请求
message CreateConversationRequest {
  // 创建者用户 ID
  string creator_id = 1;
  // 会话类型
  common.v1.ConversationType type = 2;
  // 会话名称（群聊时必填）
  string name = 3;
  // 会话头像 URL（可选）
  string avatar_url = 4;
  // 会话描述（可选）
  string description = 5;
  // 初始成员 ID 列表
  repeated string member_ids = 6;
  // 会话配置
  // 会话配置 (未来可扩展)
  // ConversationSettings settings = 7;
}

// CreateConversationResponse 创建会话响应
message CreateConversationResponse {
  // 创建的会话信息
  common.v1.Conversation conversation = 1;
}

// GetConversationRequest 获取会话详情请求
message GetConversationRequest {
  // 请求者用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 是否包含成员列表
  bool include_members = 3;
}

// GetConversationResponse 获取会话详情响应
message GetConversationResponse {
  // 会话信息
  common.v1.Conversation conversation = 1;
  // 成员列表（如果请求包含）
  repeated common.v1.ConversationMember members = 2;
}

// GetConversationsRequest 获取会话列表请求
message GetConversationsRequest {
  // 用户 ID
  string user_id = 1;
  // 页码（从 1 开始）
  int32 page = 2;
  // 每页大小
  int32 page_size = 3;
  // 会话类型过滤（可选）
  common.v1.ConversationType type_filter = 4;
  // 排序方式（默认按更新时间倒序）
  string order_by = 5;
}

// GetConversationsResponse 获取会话列表响应
message GetConversationsResponse {
  // 会话列表
  repeated common.v1.Conversation conversations = 1;
  // 总数量
  int64 total = 2;
  // 当前页码
  int32 page = 3;
  // 每页大小
  int32 page_size = 4;
  // 是否还有更多
  bool has_more = 5;
}

// GetConversationsOptimizedRequest 获取优化会话列表请求
// 使用一次查询获取所有必要信息，避免N+1问题
message GetConversationsOptimizedRequest {
  // 用户 ID
  string user_id = 1;
  // 页码（从 1 开始）
  int32 page = 2;
  // 每页大小
  int32 page_size = 3;
  // 会话类型过滤（可选）
  common.v1.ConversationType type_filter = 4;
  // 排序方式（默认按更新时间倒序）
  string order_by = 5;
  // 是否包含最后消息
  bool include_last_message = 6;
  // 是否包含未读数
  bool include_unread_count = 7;
}

// GetConversationsOptimizedResponse 获取优化会话列表响应
message GetConversationsOptimizedResponse {
  // 优化的会话列表（包含完整信息）
  repeated ConversationOptimized conversations = 1;
  // 总数量
  int64 total = 2;
  // 当前页码
  int32 page = 3;
  // 每页大小
  int32 page_size = 4;
  // 是否还有更多
  bool has_more = 5;
}

// ConversationOptimized 优化的会话信息
// 包含会话列表所需的所有信息，避免额外查询
message ConversationOptimized {
  // 会话基本信息
  string id = 1;
  common.v1.ConversationType type = 2;
  string name = 3;
  string avatar_url = 4;
  string description = 5;
  string owner_id = 6;
  int32 member_count = 7;
  // ConversationSettings settings = 8;
  int64 updated_at = 11;
  int64 created_at = 12;

  // 当前用户在此会话中的信息
  common.v1.ConversationMember my_membership = 13;

  // 最后一条消息（可选）
  common.v1.Message last_message = 9;

  // 未读消息数量（可选）
  int64 unread_count = 10;

  // 最后活动时间（用于排序）
  int64 last_activity_at = 14;
}

// UpdateConversationRequest 更新会话信息请求
message UpdateConversationRequest {
  // 操作者用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 新的会话名称（可选）
  string name = 3;
  // 新的会话头像 URL（可选）
  string avatar_url = 4;
  // 新的会话描述（可选）
  string description = 5;
  // 新的会话配置（可选）
  // ConversationSettings settings = 6;
  // 更新字段掩码
  repeated string update_mask = 7;
}

// UpdateConversationResponse 更新会话信息响应
message UpdateConversationResponse {
  // 更新后的会话信息
  common.v1.Conversation conversation = 1;
}

// DeleteConversationRequest 删除会话请求
message DeleteConversationRequest {
  // 操作者用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 删除原因（可选）
  string reason = 3;
}

// DeleteConversationResponse 删除会话响应
message DeleteConversationResponse {
  // 操作是否成功
  bool success = 1;
}

// AddMembersRequest 添加成员请求
message AddMembersRequest {
  // 操作者用户 ID
  string operator_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 要添加的用户 ID 列表
  repeated string user_ids = 3;
  // 新成员角色（默认为普通成员）
  common.v1.ConversationMemberRole role = 4;
}

// AddMembersResponse 添加成员响应
message AddMembersResponse {
  // 操作是否成功
  bool success = 1;
  // 成功添加的用户 ID 列表
  repeated string added_user_ids = 2;
  // 失败的用户 ID 列表及原因
  repeated FailedUser failed_users = 3;
}

// RemoveMembersRequest 移除成员请求
message RemoveMembersRequest {
  // 操作者用户 ID
  string operator_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 要移除的用户 ID 列表
  repeated string user_ids = 3;
  // 移除原因（可选）
  string reason = 4;
}

// RemoveMembersResponse 移除成员响应
message RemoveMembersResponse {
  // 操作是否成功
  bool success = 1;
  // 成功移除的用户 ID 列表
  repeated string removed_user_ids = 2;
  // 失败的用户 ID 列表及原因
  repeated FailedUser failed_users = 3;
}

// UpdateMemberRoleRequest 更新成员角色请求
message UpdateMemberRoleRequest {
  // 操作者用户 ID
  string operator_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 目标用户 ID
  string target_user_id = 3;
  // 新角色
  common.v1.ConversationMemberRole new_role = 4;
}

// UpdateMemberRoleResponse 更新成员角色响应
message UpdateMemberRoleResponse {
  // 操作是否成功
  bool success = 1;
}

// GetMembersRequest 获取成员列表请求
message GetMembersRequest {
  // 请求者用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 页码（从 1 开始）
  int32 page = 3;
  // 每页大小
  int32 page_size = 4;
  // 角色过滤（可选）
  common.v1.ConversationMemberRole role_filter = 5;
}

// GetMembersResponse 获取成员列表响应
message GetMembersResponse {
  // 成员列表
  repeated common.v1.ConversationMember members = 1;
  // 总数量
  int64 total = 2;
  // 当前页码
  int32 page = 3;
  // 每页大小
  int32 page_size = 4;
  // 是否还有更多
  bool has_more = 5;
}

// LeaveConversationRequest 离开会话请求
message LeaveConversationRequest {
  // 用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
}

// LeaveConversationResponse 离开会话响应
message LeaveConversationResponse {
  // 操作是否成功
  bool success = 1;
}

// GetMessagesRequest 获取历史消息请求
message GetMessagesRequest {
  // 用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 起始序列号（可选，用于分页）
  int64 start_seq_id = 3;
  // 结束序列号（可选，用于分页）
  int64 end_seq_id = 4;
  // 限制数量
  int32 limit = 5;
  // 排序方向（true: 升序, false: 降序）
  bool ascending = 6;
  // 消息类型过滤（可选）
  repeated common.v1.MessageType type_filter = 7;
}

// GetMessagesResponse 获取历史消息响应
message GetMessagesResponse {
  // 消息列表
  repeated common.v1.Message messages = 1;
  // 是否还有更多消息
  bool has_more = 2;
  // 下一页的起始序列号
  int64 next_seq_id = 3;
  // 上一页的起始序列号
  int64 prev_seq_id = 4;
}

// MarkAsReadRequest 标记已读请求
message MarkAsReadRequest {
  // 用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 已读到的序列号
  int64 seq_id = 3;
}

// MarkAsReadResponse 标记已读响应
message MarkAsReadResponse {
  // 操作是否成功
  bool success = 1;
  // 更新后的未读数量
  int64 unread_count = 2;
}

// GetUnreadCountRequest 获取未读数请求
message GetUnreadCountRequest {
  // 用户 ID
  string user_id = 1;
  // 会话 ID（可选，不指定则返回所有会话的未读数）
  string conversation_id = 2;
}

// GetUnreadCountResponse 获取未读数响应
message GetUnreadCountResponse {
  // 未读消息数量
  int64 unread_count = 1;
  // 各会话的未读数（当不指定会话 ID 时返回）
  repeated ConversationUnreadCount conversation_counts = 2;
}

// JoinWorldChatRequest 加入世界聊天室请求
message JoinWorldChatRequest {
  // 用户 ID
  string user_id = 1;
}

// JoinWorldChatResponse 加入世界聊天室响应
message JoinWorldChatResponse {
  // 操作是否成功
  bool success = 1;
  // 世界聊天室会话信息
  common.v1.Conversation conversation = 2;
}

// SearchConversationsRequest 搜索会话请求
message SearchConversationsRequest {
  // 用户 ID
  string user_id = 1;
  // 搜索关键词
  string query = 2;
  // 会话类型过滤（可选）
  common.v1.ConversationType type_filter = 3;
  // 限制数量
  int32 limit = 4;
}

// SearchConversationsResponse 搜索会话响应
message SearchConversationsResponse {
  // 搜索结果
  repeated common.v1.Conversation conversations = 1;
}

// 会话未读数
message ConversationUnreadCount {
  // 会话 ID
  string conversation_id = 1;
  // 未读数量
  int64 unread_count = 2;
}

// 失败的用户操作
message FailedUser {
  // 用户 ID
  string user_id = 1;
  // 失败原因
  string reason = 2;
  // 错误码
  common.v1.ErrorCode error_code = 3;
}
