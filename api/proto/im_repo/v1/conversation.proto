// im_repo/v1/conversation.proto
// 定义 im-repo 服务的会话数据相关接口

syntax = "proto3";

package im.repo.v1;

option go_package = "github.com/ceyewan/gochat/api/proto/im_repo/v1;repov1";

// ConversationService 会话数据服务
// 提供会话数据的存储和查询
service ConversationService {
  // GetUserConversations 获取用户会话列表
  // 查询用户参与的所有会话
  rpc GetUserConversations(GetUserConversationsRequest) returns (GetUserConversationsResponse);
  
  // UpdateReadPointer 更新已读位置
  // 更新用户在指定会话中的已读位置
  rpc UpdateReadPointer(UpdateReadPointerRequest) returns (UpdateReadPointerResponse);
  
  // GetUnreadCount 获取未读消息数
  // 计算用户在指定会话中的未读消息数量
  rpc GetUnreadCount(GetUnreadCountRequest) returns (GetUnreadCountResponse);
  
  // GetReadPointer 获取已读位置
  // 获取用户在指定会话中的已读位置
  rpc GetReadPointer(GetReadPointerRequest) returns (GetReadPointerResponse);
  
  // BatchGetUnreadCounts 批量获取未读消息数
  // 批量查询多个会话的未读消息数
  rpc BatchGetUnreadCounts(BatchGetUnreadCountsRequest) returns (BatchGetUnreadCountsResponse);

  // CreateConversation 创建会话
  // 在数据库中创建新的会话记录
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse);

  // BatchGetConversations 批量获取会话信息
  // 解决 N+1 查询问题，im-logic 获取会话列表后，可通过此接口一次性获取所有会话的详细信息
  rpc BatchGetConversations(BatchGetConversationsRequest) returns (BatchGetConversationsResponse);
  // --- 成员管理 ---

  // AddConversationMember 添加会话成员
  // 用于将一个或多个用户添加到会话中
  rpc AddConversationMember(AddConversationMemberRequest) returns (AddConversationMemberResponse);

  // RemoveConversationMember 移除会话成员
  // 用于从会话中移除一个用户
  rpc RemoveConversationMember(RemoveConversationMemberRequest) returns (RemoveConversationMemberResponse);

  // UpdateMemberRole 更新成员角色
  // 更新会话中指定成员的角色
  rpc UpdateMemberRole(UpdateMemberRoleRequest) returns (UpdateMemberRoleResponse);

  // GetConversationMembers 获取会话成员列表
  // 分页获取一个会话的所有成员
  rpc GetConversationMembers(GetConversationMembersRequest) returns (GetConversationMembersResponse);
}

// GetUserConversationsRequest 获取用户会话列表请求
message GetUserConversationsRequest {
  // 用户 ID
  string user_id = 1;
  // 偏移量
  int32 offset = 2;
  // 限制数量
  int32 limit = 3;
  // 会话类型过滤（可选）
  int32 type_filter = 4;
}

// GetUserConversationsResponse 获取用户会话列表响应
message GetUserConversationsResponse {
  // 会话 ID 列表
  repeated string conversation_ids = 1;
  // 总数量
  int64 total = 2;
  // 是否还有更多
  bool has_more = 3;
}

// UpdateReadPointerRequest 更新已读位置请求
message UpdateReadPointerRequest {
  // 用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 已读到的序列号
  int64 seq_id = 3;
}

// UpdateReadPointerResponse 更新已读位置响应
message UpdateReadPointerResponse {
  // 操作是否成功
  bool success = 1;
  // 更新后的未读数量
  int64 unread_count = 2;
}

// GetUnreadCountRequest 获取未读消息数请求
message GetUnreadCountRequest {
  // 用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
}

// GetUnreadCountResponse 获取未读消息数响应
message GetUnreadCountResponse {
  // 未读消息数量
  int64 unread_count = 1;
}

// GetReadPointerRequest 获取已读位置请求
message GetReadPointerRequest {
  // 用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
}

// GetReadPointerResponse 获取已读位置响应
message GetReadPointerResponse {
  // 已读位置信息
  ReadPointer read_pointer = 1;
}

// BatchGetUnreadCountsRequest 批量获取未读消息数请求
message BatchGetUnreadCountsRequest {
  // 用户 ID
  string user_id = 1;
  // 会话 ID 列表
  repeated string conversation_ids = 2;
}

// BatchGetUnreadCountsResponse 批量获取未读消息数响应
message BatchGetUnreadCountsResponse {
  // 未读数量映射 (conversation_id -> unread_count)
  map<string, int64> unread_counts = 1;
}

// ReadPointer 已读位置信息
message ReadPointer {
  // 用户 ID
  string user_id = 1;
  // 会话 ID
  string conversation_id = 2;
  // 最后已读序列号
  int64 last_read_seq_id = 3;
  // 更新时间（Unix 时间戳）
  int64 updated_at = 4;
}

// CreateConversationRequest 创建会话请求
message CreateConversationRequest {
  // 会话类型
  int32 type = 1;
  // 会话名称
  string name = 2;
  // 会话头像 URL
  string avatar_url = 3;
  // 会话描述
  string description = 4;
  // 会话所有者 ID
  string owner_id = 5;
  // 成员用户 ID 列表
  repeated string member_ids = 6;
}

// CreateConversationResponse 创建会话响应
message CreateConversationResponse {
  // 完整的会话信息
  Conversation conversation = 1;
}

// Conversation 会话核心信息
// 定义了会话在 repo 层需要持久化的核心字段
message Conversation {
  // 会话 ID
  string id = 1;
  // 会话类型
  int32 type = 2;
  // 会话名称
  string name = 3;
  // 会话头像 URL
  string avatar_url = 4;
  // 会话描述
  string description = 5;
  // 会话所有者 ID
  string owner_id = 6;
  // 成员数量
  int32 member_count = 7;
  // 创建时间
  int64 created_at = 8;
  // 更新时间
  int64 updated_at = 9;
}

// BatchGetConversationsRequest 批量获取会话请求
message BatchGetConversationsRequest {
  // 会话 ID 列表
  repeated string conversation_ids = 1;
}

// BatchGetConversationsResponse 批量获取会话响应
message BatchGetConversationsResponse {
  // 会话信息列表
  repeated Conversation conversations = 1;
}

// --- 成员管理消息定义 ---

// ConversationMember 会话成员信息
message ConversationMember {
  // 会话 ID
  string conversation_id = 1;
  // 用户 ID
  string user_id = 2;
  // 成员角色 (例如: 1-普通成员, 2-管理员, 3-群主)
  int32 role = 3;
  // 加入时间 (Unix 时间戳)
  int64 joined_at = 4;
}

// AddConversationMemberRequest 添加会话成员请求
message AddConversationMemberRequest {
  // 会话 ID
  string conversation_id = 1;
  // 要添加的用户 ID 列表
  repeated string user_ids = 2;
  // 成员角色
  int32 role = 3;
}

// AddConversationMemberResponse 添加会话成员响应
message AddConversationMemberResponse {
  // 操作是否成功
  bool success = 1;
}

// RemoveConversationMemberRequest 移除会话成员请求
message RemoveConversationMemberRequest {
  // 会话 ID
  string conversation_id = 1;
  // 要移除的用户 ID
  string user_id = 2;
}

// RemoveConversationMemberResponse 移除会话成员响应
message RemoveConversationMemberResponse {
  // 操作是否成功
  bool success = 1;
}

// UpdateMemberRoleRequest 更新成员角色请求
message UpdateMemberRoleRequest {
  // 会话 ID
  string conversation_id = 1;
  // 用户 ID
  string user_id = 2;
  // 新角色
  int32 new_role = 3;
}

// UpdateMemberRoleResponse 更新成员角色响应
message UpdateMemberRoleResponse {
  // 操作是否成功
  bool success = 1;
}

// GetConversationMembersRequest 获取会话成员请求
message GetConversationMembersRequest {
  // 会话 ID
  string conversation_id = 1;
  // 偏移量
  int32 offset = 2;
  // 限制数量
  int32 limit = 3;
  // 角色过滤 (可选)
  int32 role_filter = 4;
}

// GetConversationMembersResponse 获取会话成员响应
message GetConversationMembersResponse {
  // 成员列表
  repeated ConversationMember members = 1;
  // 总数量
  int64 total = 2;
  // 是否还有更多
  bool has_more = 3;
}
