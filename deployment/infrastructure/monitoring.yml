# 监控服务部署配置
# 包含 Prometheus、Grafana 和相关监控组件
version: '3.8'

networks:
  monitoring-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  loki-data:
    driver: local
  vector-data:
    driver: local

services:
  # ===== Prometheus 监控 =====
  prometheus:
    image: prom/prometheus:latest
    container_name: gochat-prometheus
    hostname: prometheus
    restart: unless-stopped
    user: root
    volumes:
      - prometheus-data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/rules:/etc/prometheus/rules
    ports:
      - "9090:9090"
    networks:
      monitoring-net:
        ipv4_address: 172.26.0.10
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===== Loki 日志存储 =====
  loki:
    image: grafana/loki:2.9.0
    container_name: gochat-loki
    hostname: loki
    restart: unless-stopped
    user: root
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      monitoring-net:
        ipv4_address: 172.26.0.15
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===== Vector 日志收集 =====
  vector:
    image: timberio/vector:0.34.0-alpine
    container_name: gochat-vector
    hostname: vector
    restart: unless-stopped
    user: root
    volumes:
      - vector-data:/var/lib/vector
      - ./config/vector/vector.toml:/etc/vector/vector.toml:ro
      - ../applications/logs:/var/log/apps:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - "8686:8686"  # Vector API
    networks:
      monitoring-net:
        ipv4_address: 172.26.0.16
    depends_on:
      - loki
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8686/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===== Grafana 可视化 =====
  grafana:
    image: grafana/grafana:10.2.0
    container_name: gochat-grafana
    hostname: grafana
    restart: unless-stopped
    user: root
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=gochat_grafana_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      monitoring-net:
        ipv4_address: 172.26.0.11
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===== AlertManager 告警 =====
  alertmanager:
    image: prom/alertmanager:latest
    container_name: gochat-alertmanager
    hostname: alertmanager
    restart: unless-stopped
    user: root
    volumes:
      - alertmanager-data:/alertmanager
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      monitoring-net:
        ipv4_address: 172.26.0.12
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===== Node Exporter 系统监控 =====
  node-exporter:
    image: prom/node-exporter:latest
    container_name: gochat-node-exporter
    hostname: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      monitoring-net:
        ipv4_address: 172.26.0.13
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== cAdvisor 容器监控 =====
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: gochat-cadvisor
    hostname: cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8084:8080"
    networks:
      monitoring-net:
        ipv4_address: 172.26.0.14
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Jaeger 链路追踪 =====
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: gochat-jaeger
    hostname: jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "9411:9411"    # Zipkin compatible endpoint
    networks:
      monitoring-net:
        ipv4_address: 172.26.0.15
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s