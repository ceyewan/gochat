# Vector 配置文件 - GoChat 日志收集和处理

# ===== 数据目录配置 =====
data_dir = "/var/lib/vector"

# ===== API 配置 =====
[api]
enabled = true
address = "0.0.0.0:8686"

# ===== 日志源配置 =====

# 应用日志文件收集
[sources.app_logs]
type = "file"
include = ["/var/log/apps/*/app.log"]
ignore_older_secs = 86400  # 忽略1天前的日志
fingerprint_lines = 1
start_at_beginning = false

# Docker 容器日志收集
[sources.docker_logs]
type = "docker_logs"
docker_host = "unix:///var/run/docker.sock"
include_containers = ["gochat-*"]
exclude_containers = ["gochat-vector", "gochat-loki", "gochat-grafana"]

# ===== 数据转换配置 =====

# 应用日志解析和增强
[transforms.parse_app_logs]
type = "remap"
inputs = ["app_logs"]
source = '''
# 解析 JSON 格式的日志
if is_string(.message) {
  parsed = parse_json(.message) ?? {}
  . = merge(., parsed)
}

# 添加标准字段
.source_type = "application"
.log_type = "app"

# 从文件路径提取服务名
if exists(.file) {
  service_match = parse_regex(.file, r"/var/log/apps/(?P<service>[^/]+)/")
  if exists(service_match.service) {
    .service = service_match.service
  }
}

# 确保时间戳格式正确
if exists(.timestamp) {
  .timestamp = parse_timestamp(.timestamp, format: "%+") ?? now()
} else {
  .timestamp = now()
}

# 标准化日志级别
if exists(.level) {
  .level = upcase(.level)
}

# 添加环境标识
.environment = "dev"
.cluster = "gochat-dev"
'''

# Docker 日志解析和增强
[transforms.parse_docker_logs]
type = "remap"
inputs = ["docker_logs"]
source = '''
# 添加标准字段
.source_type = "docker"
.log_type = "container"

# 从容器名提取服务名
if exists(.container_name) {
  service_match = parse_regex(.container_name, r"gochat-(?P<service>[^-]+)")
  if exists(service_match.service) {
    .service = service_match.service
  } else {
    .service = .container_name
  }
}

# 尝试解析 JSON 格式的消息
if is_string(.message) {
  parsed = parse_json(.message) ?? {}
  if length(parsed) > 0 {
    . = merge(., parsed)
  }
}

# 确保时间戳存在
if !exists(.timestamp) {
  .timestamp = now()
}

# 添加环境标识
.environment = "dev"
.cluster = "gochat-dev"
'''

# 日志过滤和清理
[transforms.filter_logs]
type = "filter"
inputs = ["parse_app_logs", "parse_docker_logs"]
condition = '''
# 过滤掉健康检查日志
!includes(.message, "health") &&
!includes(.message, "ping") &&
# 过滤掉过于频繁的调试日志
!(exists(.level) && .level == "DEBUG" && includes(.message, "heartbeat"))
'''

# 添加标签和元数据
[transforms.add_labels]
type = "remap"
inputs = ["filter_logs"]
source = '''
# 添加 Loki 标签
.labels.service = .service ?? "unknown"
.labels.level = .level ?? "info"
.labels.environment = .environment ?? "dev"
.labels.source_type = .source_type ?? "unknown"

# 添加主机信息
.labels.host = get_hostname() ?? "unknown"

# 格式化消息字段
if !exists(.message) && exists(.msg) {
  .message = .msg
  del(.msg)
}

# 确保消息是字符串
if !is_string(.message) {
  .message = encode_json(.message)
}
'''

# ===== 输出配置 =====

# 输出到 Loki
[sinks.loki]
type = "loki"
inputs = ["add_labels"]
endpoint = "http://loki:3100"
encoding.codec = "json"
labels.service = "{{ service }}"
labels.level = "{{ level }}"
labels.environment = "{{ environment }}"
labels.source_type = "{{ source_type }}"
labels.host = "{{ host }}"

# 批量配置
batch.max_bytes = 1048576  # 1MB
batch.timeout_secs = 5

# 重试配置
request.retry_attempts = 3
request.retry_initial_backoff_secs = 1
request.retry_max_duration_secs = 60

# 健康检查配置
healthcheck.enabled = true

# 输出到控制台（调试用）
[sinks.console]
type = "console"
inputs = ["add_labels"]
encoding.codec = "json"
target = "stdout"

# 只在调试模式下启用
[sinks.console.buffer]
type = "memory"
max_events = 100